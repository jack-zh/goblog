{"Id":246,"Title":"Python的优雅技巧(不断添加)","Slug":"2015-10-30-1","Text":"\u003cdiv id=\"ztoc\"\u003e\u003c/div\u003e\n\n## 枚举\n\n不要这么做：\n\n\ti = 0 \n\tfor item in iterable: \n\t    print i, item \n\t    i += 1\n\n而是这样：\n\n\tfor i, item in enumerate(iterable):    \n\t    print i, item\n\nEnumerate可以接受第二个参数，例如：\n\n\t\u003e\u003e\u003e list(enumerate('abc')) \n\t[(0, 'a'), (1, 'b'), (2, 'c')]\n\t\u003e\u003e\u003e list(enumerate('abc', 1)) \n\t[(1, 'a'), (2, 'b'), (3, 'c')]\n\n## 字典/集合 解析\n\n你可能知道列表解析，但不知道字典/集合解析。字典/集合解析简单而且高效，例如：\n\n\tmy_dict = {i: i * i for i in xrange(100)} \n\tmy_set = {i * 15 for i in xrange(100)}\n\n\t#There is only a difference of ':' in both\n\n## 浮点数除法\n\n如果我们除以一个整数，即使结果是一个浮点数，Python（2） 依旧会给我们一个整数。为了规避这个问题，我们需要这样做：\n\n\tresult = 1.0/2\n\n但是现在有一种别的方法可以解决这个问题，甚至在之前我都没有意识到有这种方法存在。你可以进行如下操作：\n\n\tfrom __future__ import division \n\tresult = 1/2\n\n\t#print(result)\n\t#0.5\n\n需要注意的是这个窍门只适用于Python 2。在Python 3 中就不需要进行import 操作了，因为它已经默认进行import了。\n\n## 简单的服务器\n\n你想快速简单的分享目录下的文件吗？可以这样做：\n\n\t#Python2\n\tpython -m SimpleHTTPServer\n\n\t#Python 3\n\tpython3 -m http.server\n\n这回启动一个服务器\n\n## Python表达式求值\n\n我们都知道`eval`,但也许并不是所有人都知道`literal_eval`.可以这么做：\n\n\timport ast \n\tmy_list = ast.literal_eval(expr)\n\n而不是这样：\n\n\texpr = \"[1, 2, 3]\" \n\tmy_list = eval(expr)\n\n我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。\n\n## 分析脚本\n\n按下面的方式运行脚本，可以很简单的对其进行分析：\n\n\tpython -m cProfile my_script.py\n\n## 对象自检\n\n在Python中，可以通过dir()来检查对象，例如：\n\n\t\u003e\u003e\u003e foo = [1, 2, 3, 4]\n\t\u003e\u003e\u003e dir(foo) \n\t['__add__', '__class__', '__contains__', \n\t'__delattr__', '__delitem__', '__delslice__', ... , \n\t'extend', 'index', 'insert', 'pop', 'remove', \n\t'reverse', 'sort']\n\n## 调试脚本\n\n你可以使用pdb模块在脚本中设置断点来调试脚本，就像这样：\n\n\timport pdb\n\tpdb.set_trace()\n\n你可以在脚本的任何地方加入`pdb.set_trace()`，该函数会在那个位置设置一个断点。超级方便。你应该多阅读pdb 函数的相关内容，因为在它里面还有很多鲜为人知的功能。\n\n## 简化if结构\n\n如果必须检查一些值，可以用\n\n\tif n in [1,4,5,6]:\n\n而不是用复杂的if结构：\n\n\tif n==1 or n==4 or n==5 or n==6:\n\n## 字符串/数列 逆序\n\n下面的方式可以快速反转一个列表：\n\n\t\u003e\u003e\u003e a = [1,2,3,4]\n\t\u003e\u003e\u003e a[::-1]\n\t[4, 3, 2, 1]\n\n\t#This creates a new reversed list. \n\t#If you want to reverse a list in place you can do:\n\n\ta.reverse()\n\n这种方式同样适用于字符串：\n\n\t\u003e\u003e\u003e foo = \"yasoob\"\n\t\u003e\u003e\u003e foo[::-1]\n\t'boosay'\n\n## 优雅地打印\n\n下面的方式可以用优雅的方式打印字典和列表：\n\n\tfrom pprint import pprint \n\tpprint(my_dict)\n\n这用于字典打印是非常高效的，如果你想从文件中快速优雅的打印出json，可以这样做：\n\n\tcat file.json | python -m json.tools\n\n## 三元运算\n\n三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考:\n\n\t[on_true] if [expression] else [on_false]\n\tx, y = 50, 25\n\tsmall = x if x \u003c y else y\n\n英文原文：pythontips.com/2015/04/19/nifty-python-tricks/","Tags":["Python"],"CreateTime":1446194300,"EditTime":1446194300,"UpdateTime":1446194300,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":1130}