{"Id":159,"Title":"Golang的HttpClient","Slug":"2014-12-25-1","Text":"# Golang的HttpClient\n------\n\ngolang要请求远程网页，可以使用net/http包中的client提供的方法实现。查看了官方网站有一些示例，没有太全面的例子，于是自己整理了一下。\n\n### Get请求\n\nGet请求可以直接http.Get方法，非常简单。\n\n``` Go\nfunc httpGet() {\n\tresp, err := http.Get(\"http://www.example.com/aa?id=1\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfmt.Println(string(body))\n}\n```\n\n### Post请求\n\n#### 一种是使用http.Post方式\n``` Go\nfunc httpPost() {\n\tresp, err := http.Post(\"http://www.example.com/bb\",\n\t\t\"application/x-www-form-urlencoded\",\n\t\tstrings.NewReader(\"name=cjb\"))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfmt.Println(string(body))\n}\n// Tips：使用这个方法的话，第二个参数要设置成”application/x-www-form-urlencoded”，否则post参数无法传递。\n```\n\n#### 一种是使用http.PostForm方法\n\n``` Go\nfunc httpPostForm() {\n\tresp, err := http.PostForm(\"http://www.example.com/cc\",\n\t\turl.Values{\"key\": {\"Value\"}, \"id\": {\"123\"}})\n\tif err != nil {\n\t\t// handle error\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfmt.Println(string(body))\n}\n```\n\n### 复杂的请求\n\n有时需要在请求的时候设置头参数、cookie之类的数据，就可以使用http.Do方法。\n\n``` Go\nfunc httpDo() {\n\tclient := \u0026http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"http://www.example.com/dd\", strings.NewReader(\"name=cjb\"))\n\tif err != nil {\n\t\t// handle error\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Set(\"Accept\",\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\n\treq.Header.Set(\"Accept-Charset\",\"GBK,utf-8;q=0.7,*;q=0.3\")\n\treq.Header.Set(\"Accept-Encoding\",\"gzip,deflate,sdch\")\n\treq.Header.Set(\"Accept-Language\",\"zh-CN,zh;q=0.8\")\n\treq.Header.Set(\"Cache-Control\",\"max-age=0\")\n\treq.Header.Set(\"Connection\",\"keep-alive\")\n\treq.Header.Set(\"User-Agent\",\"chrome 100\")\n\treq.Header.Set(\"Cookie\", \"name=anny\")\n\tresp, err := client.Do(req)\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfmt.Println(string(body))\n}\n// 同上面的post请求，必须要设定Content-Type为application/x-www-form-urlencoded，post参数才可正常传递。\n```\n\n### 然后我们其实可以利用上面的知识做一个ab测试工具\n\n当然 已经有人先行了\n\n压力测试工具\n\ngolang的类似AB测试工具：[gohttpbench](https://github.com/parkghost/gohttpbench)\n```\ngo build -o gb github.com/parkghost/gohttpbench\n```\n### 甜点 Golang的Web Server简单示例\n\n``` Go\npackage main\n \nimport (\n    \"net/http\"\n)\n \nfunc SayHello(w http.ResponseWriter, req *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}\n \nfunc main() {\n    http.HandleFunc(\"/hello\", SayHello)\n    http.ListenAndServe(\":8001\", nil)\n \n}\n```\n\n### 完整示例\n\n``` Go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nfunc httpGet() {\n\tresp, err := http.Get(\"http://www.example.com/aa?id=1\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tfmt.Println(string(body))\n}\n\nfunc httpPost() {\n\tresp, err := http.Post(\"http://www.example.com/bb\",\n\t\t\"application/x-www-form-urlencoded\",\n\t\tstrings.NewReader(\"name=cjb\"))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tfmt.Println(string(body))\n}\n\nfunc httpPostForm() {\n\tresp, err := http.PostForm(\"http://www.example.com/cc\",\n\t\turl.Values{\"key\": {\"Value\"}, \"id\": {\"123\"}})\n\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tfmt.Println(string(body))\n}\n\nfunc httpDo() {\n\tclient := \u0026http.Client{}\n\n\treq, err := http.NewRequest(\"POST\", \"http://www.example.com/dd\", strings.NewReader(\"name=cjb\"))\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Set(\"Accept\",\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\n\treq.Header.Set(\"Accept-Charset\",\"GBK,utf-8;q=0.7,*;q=0.3\")\n\treq.Header.Set(\"Accept-Encoding\",\"gzip,deflate,sdch\")\n\treq.Header.Set(\"Accept-Language\",\"zh-CN,zh;q=0.8\")\n\treq.Header.Set(\"Cache-Control\",\"max-age=0\")\n\treq.Header.Set(\"Connection\",\"keep-alive\")\n\treq.Header.Set(\"User-Agent\",\"chrome 100\")\n\treq.Header.Set(\"Cookie\", \"name=anny\")\n\n\tresp, err := client.Do(req)\n\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\tfmt.Println(string(body))\n}\n\nfunc main() {\n\thttpGet()\n\thttpPost()\n\thttpPostForm()\n\thttpDo()\n}\n```","Tags":["golang"],"CreateTime":1419488974,"EditTime":1419488974,"UpdateTime":1419488974,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":672}