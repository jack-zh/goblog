{"Id":237,"Title":"MySQL数据类型和常用字段属性总结","Slug":"2015-07-23-1","Text":"## 前言\n\n这里先总结数据类型。MySQL中的数据类型大的方面来分，可以分为：日期和时间、数值，以及字符串。下面就分开来进行总结。\n\n\u003cdiv id=\"ztoc\"\u003e\u003c/div\u003e\n\n## 日期和时间\n\nMySQL数据类型|含义\n-----------|-------------------\ndate|\t3字节，日期，格式：2014-09-18\ntime\t|3字节，时间，格式：08:42:30\ndatetime|\t8字节，日期时间，格式：2014-09-18 08:42:30\ntimestamp|\t4字节，自动存储记录修改的时间\nyear|\t1字节，年份\n\n## 数值数据类型\n\n### 整型\n\nMySQL数据类型\t|含义（有符号）\n---|---\ntinyint|\t1字节，范围（-128~127）\nsmallint|\t2字节，范围（-32768~32767）\nmediumint|\t3字节，范围（-8388608~8388607）\nint|\t4字节，范围（-2147483648~2147483647）\nbigint|\t8字节，范围（+-9.22*10的18次方）\n\n面定义的都是有符号的，当然了，也可以加上`unsigned`关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，比如：\n\n`tinyint unsigned`的取值范围为0~255。\n\n### 浮点型\n\nMySQL数据类型\t|含义\n---|---\nfloat(m, d)|\t4字节，单精度浮点型，m总个数，d小数位\ndouble(m, d)|\t8字节，双精度浮点型，m总个数，d小数位\ndecimal(m, d)\t|decimal是存储为字符串的浮点数\n\n我在MySQL中建立了一个表，有一列为float(5, 3)；做了以下试验：\n\n+ 1.插入123.45678，最后查询得到的结果为99.999；\n+ 2.插入123.456，最后查询结果为99.999；\n+ 3.插入12.34567，最后查询结果为12.346；\n\n所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。\n\n## 字符串数据类型\n\nMySQL数据类型|\t含义\n---|---\nchar(n)|\t固定长度，最多255个字符\nvarchar(n)\t|可变长度，最多65535个字符\ntinytext\t|可变长度，最多255个字符\ntext\t|可变长度，最多65535个字符\nmediumtext|\t可变长度，最多2的24次方-1个字符\nlongtext\t|可变长度，最多2的32次方-1个字符\n\n+ 1.`char(n)` `varchar(n)` 中括号中n代表字符的个数，并不代表字节个数，所以当使用了中文的时候(UTF8)意味着可以插入m个中文，但是实际会占用m*3个字节。\n+ 2.同时`char`和`varchar`最大的区别就在于`char`不管实际value都会占用n个字符的空间，而`varchar`只会占用实际字符应该占用的空间+1，并且实际空间`+1\u003c=n`。\n+ 3.超过`char`和`varchar`的n设置后，字符串会被截断。\n+ 4.`char`的上限为255字节，`varchar`的上限65535字节，`text`的上限为65535。\n+ 5.`char`在存储的时候会截断尾部的空格，`varchar`和`text`不会。\n+ 6.`varchar`会使用1-3个字节来存储长度，`text`不会。\n\n## 其它类型\n+ 1.enum(“member1″, “member2″, … “member65535″)\n\nenum数据类型就是定义了一种枚举，最多包含65535个不同的成员。当定义了一个enum的列时，该列的值限制为列定义中声明的值。如果列声明包含NULL属性，则NULL将被认为是一个有效值，并且是默认值。如果声明了NOT NULL，则列表的第一个成员是默认值。\n\n+ 2.set(“member”, “member2″, … “member64″)\n\nset数据类型为指定一组预定义值中的零个或多个值提供了一种方法，这组值最多包括64个成员。值的选择限制为列定义中声明的值。\n\n## 数据类型属性\n\n上面大概总结了MySQL中的数据类型，当然了，上面的总结肯定是不全面的，如果要非常全面的总结这些内容，好几篇文章都不够的。下面就再来总结一些常用的属性。\n\n### 1.auto_increment\n\nauto_increment能为新插入的行赋一个唯一的整数标识符。为列赋此属性将为每个新插入的行赋值为上一次插入的ID+1。\n\nMySQL要求将auto_increment属性用于作为主键的列。此外，每个表只允许有一个auto_increment列。例如：\n\n\tid smallint not null auto_increment primary key\n\n### 2.binary\n\nbinary属性只用于char和varchar值。当为列指定了该属性时，将以区分大小写的方式排序。与之相反，忽略binary属性时，将使用不区分大小写的方式排序。例如：\n\n\thostname char(25) binary not null\n\t\n\n### 3.default\n\ndefault属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。此外，此属性无法用于BLOB或TEXT列。如果已经为此列指定了NULL属性，没有指定默认值时默认值将为NULL，否则默认值将依赖于字段的数据类型。例如：\n\n\tsubscribed enum('0', '1') not null default '0'\n\n### 4.index\n\n如果所有其他因素都相同，要加速数据库查询，使用索引通常是最重要的一个步骤。索引一个列会为该列创建一个有序的键数组，每个键指向其相应的表行。以后针对输入条件可以搜索这个有序的键数组，与搜索整个未索引的表相比，这将在性能方面得到极大的提升。\n\n\tcreate table employees\n\t(\n\tid varchar(9) not null,\n\tfirstname varchar(15) not null,\n\tlastname varchar(25) not null,\n\temail varchar(45) not null,\n\tphone varchar(10) not null,\n\tindex lastname(lastname),\n\tprimary key(id)\n\t);\n\n我们也可以利用MySQL的create index命令在创建表之后增加索引：\n\n    create index lastname on employees (lastname(7));\n\n这一次只索引了名字的前7个字符，因为可能不需要其它字母来区分不同的名字。因为使用较小的索引时性能更好，所以应当在实践中尽量使用小的索引。\n\n### 5.not null\n\n如果将一个列定义为not null，将不允许向该列插入null值。建议在重要情况下始终使用not null属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。\n\n### 6.null\n\n为列指定null属性时，该列可以保持为空，而不论行中其它列是否已经被填充。记住，null精确的说法是“无”，而不是空字符串或0。\n\n### 7.primary key\n\nprimary key属性用于确保指定行的唯一性。指定为主键的列中，值不能重复，也不能为空。为指定为主键的列赋予auto_increment属性是很常见的，因为此列不必与行数据有任何关系，而只是作为一个唯一标识符。主键又分为以下两种：\n\n#### (1)单字段主键\n\n如果输入到数据库中的每行都已经有不可修改的唯一标识符，一般会使用单字段主键。注意，此主键一旦设置就不能再修改。\n\n#### (2)多字段主键\n\n如果记录中任何一个字段都不可能保证唯一性，就可以使用多字段主键。这时，多个字段联合起来确保唯一性。如果出现这种情况，指定一个auto_increment整数作为主键是更好的办法。\n\n### 8.unique\n\n被赋予unique属性的列将确保所有值都有不同的值，只是null值可以重复。一般会指定一个列为unique，以确保该列的所有值都不同。例如：\n\n\temail varchar(45) unique\n\n### 9.zerofill\n\nzerofill属性可用于任何数值类型，用0填充所有剩余字段空间。例如，无符号int的默认宽度是10；因此，当“零填充”的int值为4时，将表示它为0000000004。例如：\n\n\torderid int unsigned zerofill not null","Tags":["MySQL"],"CreateTime":1437620233,"EditTime":1437620269,"UpdateTime":1437620233,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":727}