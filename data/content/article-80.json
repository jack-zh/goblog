{"Id":80,"Title":"rust入门教程（0.12）-4-复合数据类型","Slug":"2014-11-04","Text":"\n### 复合数据类型\n#### 1：元组（Tuples）\n##### 基本元组\n    let x = (1i, \"hello);\n#### 固定类型元组\n    let x: (int, \u0026str) = (1, \"hello\");\n#### 元组赋值法\n    let (x, y, z) = (1i, 2i, 3i);\n    \n    println!(\"x is {}\", x);\n#### 元组。。。\n    let x = (1i, 2i, 3i);\n    let y = (2i, 3i, 4i);\n    \n    if x == y {\n        println!(\"yes\");\n    } else {\n        println!(\"no\");\n    }\n    // 你知道 会打印“no”的\n#### 例子：\n    fn next_two(x: int) -\u003e (int, int) { (x + 1i, x + 2i) }\n    \n    fn main() {\n        let (x, y) = next_two(5i);\n        println!(\"x, y = {}, {}\", x, y);\n    }\n    // x, y = 6, 7\n\n### 结构体\n#### 基本结构体\n    struct Point {\n        x: int,\n        y: int,\n    }\n    \n    fn main() {\n        let origin = Point { x: 0i, y: 0i };\n    \n        println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n    }\n\n#### 结构体例子\n    struct Point {\n        x: int,\n        y: int,\n    }\n    \n    fn main() {\n        let mut point = Point { x: 0i, y: 0i };\n    \n        point.x = 5;\n    \n        println!(\"The point is at ({}, {})\", point.x, point.y);\n    }\n    // he point is at (5, 0)\n    // 注意 let mut\n\n#### 元组 结构体和新类型\n##### 我们可以这样声明结构体（像元组一样）\n    struct Color(int, int, int);\n    struct Point(int, int, int);\n    let black  = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n\n##### 这样生命结构体\n    struct Color {\n        red: int,\n        blue: int,\n        green: int,\n    }\n    \n    struct Point {\n        x: int,\n        y: int,\n        z: int,\n    }\n\n##### 新类型的例子：\n    struct Inches(int);\n    \n    let length = Inches(10);\n    \n    let Inches(integer_length) = length;\n    println!(\"length is {} inches\", integer_length);\n\n#### 枚举类型\n##### 基本枚举类型\n    enum Ordering {\n        Less,\n        Equal,\n        Greater,\n    }\n    enum OptionalColor {\n        Color(int, int, int),\n        Missing,\n    }\n##### 例子\n    fn cmp(a: int, b: int) -\u003e Ordering {\n        if a \u003c b { Less }\n        else if a \u003e b { Greater }\n        else { Equal }\n    }\n    \n    fn main() {\n        let x = 5i;\n        let y = 10i;\n    \n        let ordering = cmp(x, y);\n    \n        if ordering == Less {\n            println!(\"less\");\n        } else if ordering == Greater {\n            println!(\"greater\");\n        } else if ordering == Equal {\n            println!(\"equal\");\n        }\n    }\n\n##### 例子\n    enum OptionalInt {\n        Value(int),\n        Missing,\n    }\n    \n    fn main() {\n        let x = Value(5);\n        let y = Missing;\n    \n        match x {\n            Value(n) =\u003e println!(\"x is {:d}\", n),\n            Missing  =\u003e println!(\"x is missing!\"),\n        }\n    \n        match y {\n            Value(n) =\u003e println!(\"y is {:d}\", n),\n            Missing  =\u003e println!(\"y is missing!\"),\n        }\n    }\n","Tags":["rust"],"CreateTime":1415266213,"EditTime":1415266213,"UpdateTime":1415266213,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":178}