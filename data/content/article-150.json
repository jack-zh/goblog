{"Id":150,"Title":"Python单例-我的单例","Slug":"2014-12-12-1","Text":"    #-*- encoding=utf-8 -*-\n    print '----------------------方法1--------------------------'\n    #方法1,实现__new__方法\n    #并在将一个类的实例绑定到类变量_instance上,\n    #如果cls._instance为None说明该类还没有实例化过,实例化该类,并返回\n    #如果cls._instance不为None,直接返回cls._instance\n    class Singleton(object):\n        def __new__(cls, *args, **kw):\n            if not hasattr(cls, '_instance'):\n                orig = super(Singleton, cls)\n                cls._instance = orig.__new__(cls, *args, **kw)\n            return cls._instance\n    \n    class MyClass(Singleton):\n        a = 1\n    \n    one = MyClass()\n    two = MyClass()\n    \n    two.a = 3\n    print one.a\n    #3\n    #one和two完全相同,可以用id(), ==, is检测\n    print id(one)\n    #29097904\n    print id(two)\n    #29097904\n    print one == two\n    #True\n    print one is two\n    #True\n    \n    print '----------------------方法2--------------------------'\n    #方法2,共享属性;所谓单例就是所有引用(实例、对象)拥有相同的状态(属性)和行为(方法)\n    #同一个类的所有实例天然拥有相同的行为(方法),\n    #只需要保证同一个类的所有实例具有相同的状态(属性)即可\n    #所有实例共享属性的最简单最直接的方法就是__dict__属性指向(引用)同一个字典(dict)\n    #可参看:http://code.activestate.com/recipes/66531/\n    class Borg(object):\n        _state = {}\n        def __new__(cls, *args, **kw):\n            ob = super(Borg, cls).__new__(cls, *args, **kw)\n            ob.__dict__ = cls._state\n            return ob\n    \n    class MyClass2(Borg):\n        a = 1\n    \n    one = MyClass2()\n    two = MyClass2()\n    \n    #one和two是两个不同的对象,id, ==, is对比结果可看出\n    two.a = 3\n    print one.a\n    #3\n    print id(one)\n    #28873680\n    print id(two)\n    #28873712\n    print one == two\n    #False\n    print one is two\n    #False\n    #但是one和two具有相同的（同一个__dict__属性）,见:\n    print id(one.__dict__)\n    #30104000\n    print id(two.__dict__)\n    #30104000\n    \n    print '----------------------方法3--------------------------'\n    #方法3:本质上是方法1的升级（或者说高级）版\n    #使用__metaclass__（元类）的高级python用法\n    class Singleton2(type):\n        def __init__(cls, name, bases, dict):\n            super(Singleton2, cls).__init__(name, bases, dict)\n            cls._instance = None\n        def __call__(cls, *args, **kw):\n            if cls._instance is None:\n                cls._instance = super(Singleton2, cls).__call__(*args, **kw)\n            return cls._instance\n    \n    class MyClass3(object):\n        __metaclass__ = Singleton2\n    \n    one = MyClass3()\n    two = MyClass3()\n    \n    two.a = 3\n    print one.a\n    #3\n    print id(one)\n    #31495472\n    print id(two)\n    #31495472\n    print one == two\n    #True\n    print one is two\n    #True\n    \n    print '----------------------方法4--------------------------'\n    #方法4:也是方法1的升级（高级）版本,\n    #使用装饰器(decorator),\n    #这是一种更pythonic,更elegant的方法,\n    #单例类本身根本不知道自己是单例的,因为他本身(自己的代码)并不是单例的\n    def singleton(cls, *args, **kw):\n        instances = {}\n        def _singleton():\n            if cls not in instances:\n                instances[cls] = cls(*args, **kw)\n            return instances[cls]\n        return _singleton\n    \n    @singleton\n    class MyClass4(object):\n        a = 1\n        def __init__(self, x=0):\n            self.x = x\n    \n    one = MyClass4()\n    two = MyClass4()\n    \n    two.a = 3\n    print one.a\n    #3\n    print id(one)\n    #29660784\n    print id(two)\n    #29660784\n    print one == two\n    #True\n    print one is two\n    #True\n    one.x = 1\n    print one.x\n    #1\n    print two.x\n    #1\n    \n    print \"高潮来了  我的办法\"\n    #Python真的需要单例模式吗？我指像其他编程语言中的单例模式。\n    \n    # 答案是：不需要！\n    \n    # 因为，Python有模块（module），最pythonic的单例典范。\n    \n    # 模块在在一个应用程序中只有一份，它本身就是单例的，将你所需要的属性和方法，直接暴露在模块中变成模块的全局变量和方法即可！\n    \n    class MySingleton(object):\n        def __init__(self, a):\n            self.a = a\n    \n        def printa(self):\n            print(self.a)\n    \n        def seta(self, a):\n            self.a = a\n    \n    \n    \n    mySingleton = MySingleton(1) # 全局变量\n        ","Tags":["python"],"CreateTime":1418377798,"EditTime":1418377945,"UpdateTime":1418377798,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":164}