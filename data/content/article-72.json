{"Id":72,"Title":"C语言基础（3-1)-关键字","Slug":"2014-11-04-2","Text":"### C语言基础（3-1）-关键字\n\n#####  1 数据类型关键字\n  + A.基本数据类型（5个）\n    + void ：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果\n    + char ：字符型类型数据，属于整型数据的一种\n    + int ：整型数据，通常为编译器指定的机器字长\n    + float ：单精度浮点型数据，属于浮点数据的一种\n    + double ：双精度浮点型数据，属于浮点数据的一种\n  + B .类型修饰关键字（4个）\n    + short ：修饰int，短整型数据，可省略被修饰的int。\n    + long ：修饰int，长整形数据，可省略被修饰的int。\n    + signed ：修饰整型数据，有符号数据类型\n    + unsigned ：修饰整型数据，无符号数据类型\n  + C .复杂类型关键字（5个）\n    + struct ：结构体声明\n    + union ：共用体声明\n    + enum ：枚举声明\n    + typedef ：声明类型别名\n    + sizeof ：得到特定类型或特定类型变量的大小\n  + D .存储级别关键字（6个）\n    + auto ：指定为自动变量，由编译器自动分配及释放。通常在栈上分配\n    + static ：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部\n    + register ：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数\n    + extern ：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。\n    + const ：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）\n    + volatile ：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值\n\n##### 2 流程控制关键字\n  + A .跳转结构（4个）\n    + return ：用在函数体中，返回特定值（或者是void值，即不返回值）\n    + continue ：结束当前循环，开始下一轮循环\n    + break ：跳出当前循环或switch结构\n    + goto ：无条件跳转语句\n  + B .分支结构（5个）\n    + if ：条件语句，后面不需要放分号\n    + else ：条件语句否定分支（与if连用）\n    + switch ：开关语句（多重分支语句）\n    + case ：开关语句中的分支标记\n    + default ：开关语句中的“其他”分支，可选。\n  + C .循环结构（3个）\n    + for：for循环结构，for(1;2;3)4;的执行顺序为1-\u003e2-\u003e4-\u003e3-\u003e2...循环，其中2为循环条件。在整个for循环过程中，表达式1只计算一次，表达式2和表达式3则可能计算多次，也可能一次也不计算。循环体可能多次执行，也可能一次都不执行。\n    + do ：do循环结构，do 1 while(2); 的执行顺序是1-\u003e2-\u003e1...循环，2为循环条件\n    + while ：while循环结构，while(1) 2; 的执行顺序是1-\u003e2-\u003e1...循环，1为循环条件\n\n##### 3 C99新增关键字\n  + _Bool：布尔类型，用来表示真或假，零表示假，非零表示真。所有非零的数赋值给布尔型变量，最终的值还是1。\n  + _Complex：复数类型,C99提供了三种复数类型：float _Complex，double _Complex，long double _Complex复数类型包括一个实部和一个虚部。\n  + _Imaginary：虚数类型,C99提供了三种虚数类型float _Imaginary，double _Imaginary，以及 long double _Imaginary，虚数类型没有实部，只有虚部。\n  + restrict:用来限定指针，表明指针是访问一个数据对象的唯一且初始化对象。作用是告诉编译器除了该指针，其他任何指针都不能对所指向的数据进行存取，以便编译器优化代码。\n  + inline：内联函数,是为了解决C 预处理器宏存在的问题所提出一种解决方案，用来提高函数使用效率。内联函数使用inline关键字定义，并且函数体和申明必须结合在一起， 否则编译器将他作为普通函数对待。","Tags":["C"],"CreateTime":1415094312,"EditTime":1415095167,"UpdateTime":1415094312,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":103}