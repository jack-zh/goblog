{"Id":211,"Title":" Go并发编程基础（译）","Slug":"2015-05-21-1","Text":"\u003e 转自:  [黑*白](http://blog.xiayf.cn/2015/05/20/fundamentals-of-concurrent-programming/)\n\n\u003e 原文: [Fundamentals of concurrent programming](http://www.nada.kth.se/~snilsson/concurrency/)\n\n\u003e 译者: [youngsterxyf](https://github.com/youngsterxyf)\n\n本文是一篇并发编程方面的入门文章，以[Go语](http://golang.org/)言编写示例代码，内容涵盖：\n\n+ 运行期并发线程（goroutines）\n+ 基本的同步技术（管道和锁）\n+ Go语言中基本的并发模式\n+ 死锁和数据竞争\n+ 并行计算\n\n在开始阅读本文之前，你应该知道如何编写简单的Go程序。如果你熟悉的是C/C++、Java或Python之类的语言，那么 [Go语言之旅](http://tour.golang.org/welcome/1) 能提供所有必要的背景知识。也许你还有兴趣读一读 [为C++程序员准备的Go语言教程](http://code.google.com/p/go-wiki/wiki/GoForCPPProgrammers) 或 [为Java程序员准备的Go语言教程](http://www.nada.kth.se/~snilsson/go_for_java_programmers/)。\n\n## 1. 运行期线程\n\nGo允许使用`go`语句开启一个新的运行期线程，即 [goroutine](http://golang.org/ref/spec#Go_statements)，以一个不同的、新创建的goroutine来执行一个函数。同一个程序中的所有goroutine共享同一个地址空间。\n\nGoroutine非常轻量，除了为之分配的栈空间，其所占用的内存空间微乎其微。并且其栈空间在开始时非常小，之后随着堆存储空间的按需分配或释放而变化。内部实现上，goroutine会在多个操作系统线程上多路复用。如果一个goroutine阻塞了一个操作系统线程，例如：等待输入，这个线程上的其他goroutine就会迁移到其他线程，这样能继续运行。开发者并不需要关心/担心这些细节。\n\n下面所示程序会输出“Hello from main goroutine”。也可能会输出“Hello from another goroutine”，具体依赖于两个goroutine哪个先结束。\n\n[goroutine1.go](http://www.nada.kth.se/~snilsson/concurrency/src/goroutine1.go):\n\n\tfunc main() {\n\t    go fmt.Println(\"Hello from another goroutine\")\n\t    fmt.Println(\"Hello from main goroutine\")\n\n\t    // 至此，程序运行结束，\n\t    // 所有活跃的goroutine被杀死\n\t}\n\n接下来的这个程序，多数情况下，会输出“Hello from main goroutine”和“Hello from another goroutine”，输出的顺序不确定。但还有另一个可能性是：第二个goroutine运行得极其慢，在程序结束之前都没来得及输出相应的消息。\n\n[goroutine2.go](http://www.nada.kth.se/~snilsson/concurrency/src/goroutine2.go):\n\n\tfunc main() {\n\t    go fmt.Println(\"Hello from another goroutine\")\n\t    fmt.Println(\"Hello from main goroutine\")\n\n\t    time.Sleep(time.Second)     // 等待1秒，等另一个goroutine结束\n\t}\n\n下面则是一个相对更加实际的示例，其中定义了一个函数使用并发来推迟触发一个事件。\n\n[publish1.go](http://www.nada.kth.se/~snilsson/concurrency/src/publish1.go):\n\n\t// 函数Publish在给定时间过期后打印text字符串到标准输出\n\t// 该函数并不会阻塞而是立即返回\n\tfunc Publish(text string, delay time.Duration) {\n\t    go func() {\n\t        time.Sleep(delay)\n\t        fmt.Println(\"BREAKING NEWS:\", text)\n\t    }() // 注意这里的括号。必须调用匿名函数\n\t}\n\n你可能会这样使用`Publish`函数([publish1.go](http://www.nada.kth.se/~snilsson/concurrency/src/publish1.go))：\n\n\tfunc main() {\n\t    Publish(\"A goroutine starts a new thread of execution.\", 5*time.Second)\n\t    fmt.Println(\"Let’s hope the news will published before I leave.\")\n\n\t    // 等待发布新闻\n\t    time.Sleep(10 * time.Second)\n\n\t    fmt.Println(\"Ten seconds later: I’m leaving now.\")\n\t}\n\n这个程序，绝大多数情况下，会输出以下三行，顺序固定，每行输出之间相隔5秒。\n\n\t$ go run publish1.go\n\tLet’s hope the news will published before I leave.\n\tBREAKING NEWS: A goroutine starts a new thread of execution.\n\tTen seconds later: I’m leaving now.\n\n\n一般来说，通过睡眠的方式来编排线程之间相互等待是不太可能的。下一章节会介绍Go语言中的一种同步机制 - 管道，并演示如何使用管道让一个goroutine等待另一个goroutine。\n\n## 2. 管道（channel）\n\n![](http://www.nada.kth.se/~snilsson/concurrency/sushi-conveyor-belt.jpg)\n\n[管道](http://golang.org/ref/spec#Channel_types)是Go语言的一个构件，提供一种机制用于两个goroutine之间通过传递一个指定类型的值来同步运行和通讯。操作符`\u003c-`用于指定管道的方向，发送或接收。如果未指定方向，则为双向管道。\n\n\tchan Sushi      // 可用来发送和接收Sushi类型的值\n\tchan\u003c- float64  // 仅可用来发送float64类型的值\n\t\u003c-chan int      // 仅可用来接收int类型的值\n\n管道是引用类型，基于make函数来分配。\n\n\tic := make(chan int)    // 不带缓冲的int类型管道\n\twc := make(chan *Work, 10)  // 带缓冲的Work类型指针管道\n\n如果压迫通过管道发送一个值，则将`\u003c-`作为二元操作符使用。通过管道接收一个值，则将其作为一元操作符使用：\n\n\tic \u003c- 3     // 往管道发送3\n\twork := \u003c-wc    // 从管道接收一个指向Work类型值的指针\n\n如果管道不带缓冲，发送方会阻塞直到接收方从管道中接收了值。如果管道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可能接收之前会一直阻塞。\n\n#### 关闭管道（Close）\n\n[close](http://golang.org/ref/spec#Close) 函数标志着不会再往某个管道发送值。在调用`close`之后，并且在之前发送的值都被接收后，接收操作会返回一个零值，不会阻塞。一个多返回值的接收操作会额外返回一个布尔值用来指示返回的值是否发送操作传递的。\n\n\tch := make(chan string)\n\tgo func() {\n\t    ch \u003c- \"Hello!\"\n\t    close(ch)\n\t}()\n\tfmt.Println(\u003c-ch)   // 输出字符串\"Hello!\"\n\tfmt.Println(\u003c-ch)   // 输出零值 - 空字符串\"\"，不会阻塞\n\tfmt.Println(\u003c-ch)   // 再次打印输出空字符串\"\"\n\tv, ok := \u003c-ch       // 变量v的值为空字符串\"\"，变量ok的值为false\n\n一个带有`range`子句的`for`语句会依次读取发往管道的值，直到该管道关闭：\n\n[sushi.go](http://www.nada.kth.se/~snilsson/concurrency/src/sushi.go):\n\n\tfunc main() {\n\t    // 译注：要想运行该示例，需要先定义类型Sushi，如type Sushi string\n\t    var ch \u003c-chan Sushi = Producer()\n\t    for s := range ch {\n\t        fmt.Println(\"Consumed\", s)\n\t    }\n\t}\n\n\tfunc Producer() \u003c-chan Sushi {\n\t    ch := make(chan Sushi)\n\t    go func(){\n\t        ch \u003c- Sushi(\"海老握り\") // Ebi nigiri\n\t        ch \u003c- Sushi(\"鮪とろ握り\") // Toro nigiri\n\t        close(ch)\n\t    }()\n\t    return ch\n\t}\n\n## 3. 同步\n\n下一个示例中，我们让`Publish`函数返回一个管道 - 用于在发布text变量值时广播一条消息：\n\n[publish2.go](http://www.nada.kth.se/~snilsson/concurrency/src/publish2.go):\n\n\t// 在给定时间过期时，Publish函数会打印text变量值到标准输出\n\t// 在text变量值发布后，该函数会关闭管道wait\n\tfunc Publish(text string, delay time.Duration) (wait \u003c-chan struct{}) {\n\t    ch := make(chan struct{})\n\t    go func() {\n\t        time.Sleep(delay)\n\t        fmt.Println(\"BREAKING NEWS:\", text)\n\t        close(ch)   // 广播 - 一个关闭的管道都会发送一个零值\n\t    }()\n\t    return ch\n\t}\n\n注意：我们使用了一个空结构体的管道：`struct{}`。这明确地指明该管道仅用于发信号，而不是传递数据。\n\n我们可能会这样使用这个函数：\n\n[publish2.go](http://www.nada.kth.se/~snilsson/concurrency/src/publish2.go):\n\n\tfunc main() {\n\t    wait := Publish(\"Channels let goroutines communicate.\", 5*time.Second)\n\t    fmt.Println(\"Waiting for the news...\")\n\t    \u003c-wait\n\t    fmt.Println(\"The news is out, time to leave.\")\n\t}\n\n\n这个程序会按指定的顺序输出以下三行内容。最后一行在新闻（news）一出就会立即输出。\n\n\t$ go run publish2.go\n\tWaiting for the news...\n\tBREAKING NEWS: Channels let goroutines communicate.\n\tThe news is out, time to leave.\n\n## 4. 死锁\n\n![](http://www.nada.kth.se/~snilsson/concurrency/traffic-jam.jpg)\n\n现在我们在`Publish`函数中引入一个bug：\n\n\tfunc Publish(text string, delay time.Duration) (wait \u003c-chan struct{}) {\n\t    ch := make(chan struct{})\n\t    go func() {\n\t        time.Sleep(delay)\n\t        fmt.Println(\"BREAKING NEWS:\", text)\n\t        // 译注：注意这里将close函数调用注释掉了\n\t        //close(ch)\n\t    }()\n\t    return ch\n\t}\n\n主程序还是像之前一样开始运行：输出第一行，然后等待5秒，这时`Publish`函数开启的goroutine会输出突发新闻（breaking news），然后退出，留下主goroutine独自等待。\n\n\tfunc main() {\n\t    wait := Publish(\"Channels let goroutines communicate.\", 5*time.Second)\n\t    fmt.Println(\"Waiting for the news...\")\n\t    // 译注：注意下面这一句\n\t    \u003c-wait\n\t    fmt.Println(\"The news is out, time to leave.\")\n\t}\n\n此刻之后，程序无法再继续往下执行。众所周知，这种情形即为死锁。\n\n\u003e 死锁是线程之间相互等待，其中任何一个都无法向前运行的情形。\n\nGo语言对于运行时的死锁检测具备良好的支持。当没有任何goroutine能够往前执行的情形发生时，Go程序通常会提供详细的错误信息。以下就是我们的问题程序的输出：\n\n\tWaiting for the news...\n\tBREAKING NEWS: Channels let goroutines communicate.\n\tfatal error: all goroutines are asleep - deadlock!\n\n\tgoroutine 1 [chan receive]:\n\tmain.main()\n\t    .../goroutineStop.go:11 +0xf6\n\n\tgoroutine 2 [syscall]:\n\tcreated by runtime.main\n\t    .../go/src/pkg/runtime/proc.c:225\n\n\tgoroutine 4 [timer goroutine (idle)]:\n\tcreated by addtimer\n\t    .../go/src/pkg/runtime/ztime_linux_amd64.c:73\n\n大多数情况下找出Go程序中造成死锁的原因都比较容易，那么剩下的就是如何解决这个bug了。\n\n## 5. 数据竞争（data race）\n\n死锁也许听起来令人挺忧伤的，但伴随并发编程真正灾难性的错误其实是数据竞争，相当常见，也可能非常难于调试。\n\n\u003e 当两个线程并发地访问同一个变量，并且其中至少一个访问是写操作时，数据竞争就发生了。\n\n下面的这个函数就有数据竞争问题，其行为是未定义的。例如，可能输出数值1。代码之后是一个可能性解释，试图搞清楚这一切是如何发生得。\n\n[datarace.go](http://www.nada.kth.se/~snilsson/concurrency/src/datarace.go):\n\n\tfunc race() {\n\t    wait := make(chan struct{})\n\t    n := 0\n\t    go func() {\n\t        // 译注：注意下面这一行\n\t        n++ // 一次访问: 读, 递增, 写\n\t        close(wait)\n\t    }()\n\t    // 译注：注意下面这一行\n\t    n++ // 另一次冲突的访问\n\t    \u003c-wait\n\t    fmt.Println(n) // 输出：未指定\n\t}\n\n代码中的两个goroutine（假设命名为`g1`和`g2`）参与了一次竞争，我们无法获知操作会以何种顺序发生。以下是诸多可能中的一种：\n\n+ `g1` 从 `n` 中获取值0\n+ `g2` 从 `n` 中获取值0\n+ `g1` 将值从0增大到1\n+ `g1` 将1写到 `n`\n+ `g2` 将值从0增大到1\n+  `g2` 将1写到 `n`\n+  程序输出 `n` 的值，当前为1\n\n“数据竞争（data race）”这名字有点误导的嫌疑。不仅操作的顺序是未定义的，其实根本没有任何保证（no guarantees whatsoever）。编译器和硬件为了得到更好的性能，经常都会对代码进行上下内外的顺序变换。如果你看到一个线程处于中间行为状态时，那么当时的场景可能就像下图所示的一样：\n\n![](http://www.nada.kth.se/~snilsson/concurrency/mid-action.jpg)\n\n避免数据竞争的唯一方式是线程间同步访问所有的共享可变数据。有几种方式能够实现这一目标。Go语言中，通常是使用管道或者锁。（[sync](http://golang.org/pkg/sync/)和[sync/atomic](http://golang.org/pkg/sync/atomic/)包中还有更低层次的机制可供使用，但本文中不做讨论）。\n\nGo语言中，处理并发数据访问的推荐方式是使用管道从一个goroutine中往下一个goroutine传递实际的数据。有格言说得好：“不要通过共享内存来通讯，而是通过通讯来共享内存”。\n\n[datarace.go](http://www.nada.kth.se/~snilsson/concurrency/src/datarace.go):\n\n\tfunc sharingIsCaring() {\n\t    ch := make(chan int)\n\t    go func() {\n\t        n := 0 // 仅为一个goroutine可见的局部变量.\n\t        n++\n\t        ch \u003c- n // 数据从一个goroutine离开...\n\t    }()\n\t    n := \u003c-ch   // ...然后安全到达另一个goroutine.\n\t    n++\n\t    fmt.Println(n) // 输出: 2\n\t}\n\n以上代码中的管道肩负双重责任 - 从一个goroutine将数据传递到另一个goroutine，并且起到同步的作用：发送方goroutine会等待另一个goroutine接收数据，接收方goroutine也会等待另一个goroutine发送数据。\n\n[Go语言内存模型](http://golang.org/ref/mem) - 要保证一个goroutine中对一个变量的读操作得到的值正好是另一个goroutine中对同一个变量写操作产生的值，条件相当复杂，但goroutine之间只要通过管道来共享所有可变数据，那么就能远离数据竞争了。\n\n## 6. 互斥锁\n\n![](http://www.nada.kth.se/~snilsson/concurrency/lock.jpg)\n\n有时，通过显式加锁，而不是使用管道，来同步数据访问，可能更加便捷。Go语言标准库为这一目的提供了一个互斥锁 - [sync.Mutex](http://golang.org/pkg/sync/#Mutex)。\n\n要想这类加锁起效的话，关键之处在于：所有对共享数据的访问，不管读写，仅当goroutine持有锁才能操作。一个goroutine出错就足以破坏掉一个程序，引入数据竞争。\n\n因此，应该设计一个自定义数据结构，具备明确的API，确保所有的同步都在数据结构内部完成。下例中，我们构建了一个安全、易于使用的并发数据结构，`AtomicInt`，用于存储一个整型值。任意数量的goroutine都能通过`Add`和`Value`方法安全地访问这个数值。\n\n[datarace.go](http://www.nada.kth.se/~snilsson/concurrency/src/datarace.go):\n\n\t/ AtomicInt是一个并发数据结构，持有一个整数值\n\t// 该数据结构的零值为0\n\ttype AtomicInt struct {\n\t    mu sync.Mutex // 锁，一次仅能被一个goroutine持有。\n\t    n  int\n\t}\n\n\t// Add方法作为一个原子操作将n加到AtomicInt\n\tfunc (a *AtomicInt) Add(n int) {\n\t    a.mu.Lock() // 等待锁释放，然后持有它\n\t    a.n += n\n\t    a.mu.Unlock() // 释放锁\n\t}\n\n\t// Value方法返回a的值\n\tfunc (a *AtomicInt) Value() int {\n\t    a.mu.Lock()\n\t    n := a.n\n\t    a.mu.Unlock()\n\t    return n\n\t}\n\n\tfunc lockItUp() {\n\t    wait := make(chan struct{})\n\t    var n AtomicInt\n\t    go func() {\n\t        n.Add(1) // 一个访问\n\t        close(wait)\n\t    }()\n\t    n.Add(1) // 另一个并发访问\n\t    \u003c-wait\n\t    fmt.Println(n.Value()) // 输出: 2\n\t}\n\n## 7. 检测数据竞争\n\n竞争有时非常难于检测。下例中的这个函数有一个数据竞争问题，执行这个程序时会输出`55555`。尝试一下，也许你会得到一个不同的结果。（[sync.WaitGroup](http://golang.org/pkg/sync/#WaitGroup)是Go语言标准库的一部分；用于等待一组goroutine结束运行。）\n\n[raceClosure.go](http://www.nada.kth.se/~snilsson/concurrency/src/raceClosure.go):\n\n\tfunc race() {\n\t    var wg sync.WaitGroup\n\t    wg.Add(5)\n\t    // 译注：注意下面这行代码中的i++\n\t    for i := 0; i \u003c 5; i++ {\n\t        go func() {\n\t            // 注意下一行代码会输出什么？为什么？\n\t            fmt.Print(i) // 6个goroutine共享变量i\n\t            wg.Done()\n\t        }()\n\t    }\n\t    wg.Wait() // 等待所有（5个）goroutine运行结束\n\t    fmt.Println()\n\t}\n\n对于输出`55555`，一个貌似合理的解释是：执行`i++`的goroutine在其他goroutine执行打印语句之前就完成了5次`i++`操作。实际上变量i更新后的值为其他goroutine所见纯属巧合。\n\n一个简单的解决方案是：使用一个局部变量，然后当开启新的goroutine时，将数值作为参数传递：\n\n[raceClosure.go](http://www.nada.kth.se/~snilsson/concurrency/src/raceClosure.go):\n\n\tfunc correct() {\n\t    var wg sync.WaitGroup\n\t    wg.Add(5)\n\t    for i := 0; i \u003c 5; i++ {\n\t        go func(n int) { // 使用局部变量\n\t            fmt.Print(n)\n\t            wg.Done()\n\t\t    }(i)\n\t    }\n\t    wg.Wait()\n\t    fmt.Println()\n\t}\n\n这次代码就对了，程序会输出期望的结果，如：`24031`。注意：goroutine之间的运行顺序是不确定的。\n\n仍旧使用闭包，但能够避免数据竞争也是可能的，必须小心翼翼地让每个goroutine使用一个独有的变量。\n\n[raceClosure.go](http://www.nada.kth.se/~snilsson/concurrency/src/raceClosure.go):\n\n\tfunc alsoCorrect() {\n\t    var wg sync.WaitGroup\n\t    wg.Add(5)\n\t    for i := 0; i \u003c 5; i++ {\n\t        n := i // 为每个闭包创建一个独有的变量\n\t        go func() {\n\t            fmt.Print(n)\n\t            wg.Done()\n\t        }()\n\t    }\n\t    wg.Wait()\n\t    fmt.Println()\n\t}\n\n#### 数据竞争自动检测\n\n一般来说，不太可能能够自动检测发现所有可能的数据竞争情况，但Go（从版本1.1开始）有一个强大的[数据竞争检测器](http://tip.golang.org/doc/articles/race_detector.html)。\n\n这个工具用起来也很简单：只要在使用go命令时加上`-race`标记即可。开启检测器运行上面的程序会给出清晰且信息量大的输出：\n\n\t$ go run -race raceClosure.go\n\tRace:\n\t==================\n\tWARNING: DATA RACE\n\tRead by goroutine 2:\n\t  main.func·001()\n\t      ../raceClosure.go:22 +0x65\n\n\tPrevious write by goroutine 0:\n\t  main.race()\n\t      ../raceClosure.go:20 +0x19b\n\t  main.main()\n\t      ../raceClosure.go:10 +0x29\n\t  runtime.main()\n\t      ../go/src/pkg/runtime/proc.c:248 +0x91\n\n\tGoroutine 2 (running) created at:\n\t  main.race()\n\t      ../raceClosure.go:24 +0x18b\n\t  main.main()\n\t      ../raceClosure.go:10 +0x29\n\t  runtime.main()\n\t      ../go/src/pkg/runtime/proc.c:248 +0x91\n\n\t==================\n\t55555\n\tCorrect:\n\t01234\n\tAlso correct:\n\t01324\n\tFound 1 data race(s)\n\texit status 66\n\n该工具发现一处数据竞争，包含：一个goroutine在第20行对一个变量进行写操作，跟着另一个goroutine在第22行对同一个变量进行了未同步的读操作。\n\n注意：竞争检测器只能发现在运行期确实发生的数据竞争（译注：我也不太理解这话，请指导）\n\n## 8. Select语句\n\n[select](http://golang.org/ref/spec#Select_statements)语句是Go语言并发工具集中的最后一个工具。`select`用于从一组可能的通讯中选择一个进一步处理。如果任意一个通讯都可以进一步处理，则从中随机选择一个，执行对应的语句。否则，如果又没有默认分支（default case），select语句则会阻塞，直到其中一个通讯完成。\n\n以下是一个玩具示例，演示`select`语句如何用于实现一个随机数生成器：\n\n[randBits.go](http://www.nada.kth.se/~snilsson/concurrency/src/randBits.go):\n\n\t// RandomBits函数 返回一个管道，用于产生一个比特随机序列\n\tfunc RandomBits() \u003c-chan int {\n\t    ch := make(chan int)\n\t    go func() {\n\t        for {\n\t            select {\n\t            case ch \u003c- 0: // 注意：分支没有对应的处理语句\n\t            case ch \u003c- 1:\n\t            }\n\t        }\n\t    }()\n\t    return ch\n\t}\n\n下面是相对更加实际一点的例子：如何使用select语句为一个操作设置一个时间限制。代码会输出变量news的值或者超时消息，具体依赖于两个接收语句哪个先执行：\n\n\tselect {\n\tcase news := \u003c-NewsAgency:\n\t    fmt.Println(news)\n\tcase \u003c-time.After(time.Minute):\n\t    fmt.Println(\"Time out: no news in one minute.\")\n\t}\n\n函数 [time.After](http://golang.org/pkg/time/#After) 是Go语言标准库的一部分；它会在等待指定时间后将当前的时间发送到返回的管道中。\n\n## 9. 综合所有示例\n\n![](http://www.nada.kth.se/~snilsson/concurrency/couples.jpg)\n\n花点时间认真研究一下这个示例。如果你完全理解，也就对Go语言中并发的应用方式有了全面的掌握。\n\n这个程序演示了如何将管道用于被任意数量的goroutine发送和接收数据，也演示了如何将select语句用于从多个通讯中选择一个。\n\n[matching.go](http://www.nada.kth.se/~snilsson/concurrency/src/matching.go):\n\n\tfunc main() {\n\t    people := []string{\"Anna\", \"Bob\", \"Cody\", \"Dave\", \"Eva\"}\n\t    match := make(chan string, 1) // 为一个未匹配的发送操作提供空间\n\t    wg := new(sync.WaitGroup)\n\t    wg.Add(len(people))\n\t    for _, name := range people {\n\t        go Seek(name, match, wg)\n\t    }\n\t    wg.Wait()\n\t    select {\n\t    case name := \u003c-match:\n\t        fmt.Printf(\"No one received %s’s message.\\n\", name)\n\t    default:\n\t        // 没有待处理的发送操作\n\t    }\n\t}\n\n\t// 函数Seek 发送一个name到match管道或从match管道接收一个peer，结束时通知wait group\n\tfunc Seek(name string, match chan string, wg *sync.WaitGroup) {\n\t    select {\n\t    case peer := \u003c-match:\n\t        fmt.Printf(\"%s sent a message to %s.\\n\", peer, name)\n\t    case match \u003c- name:\n\t        // 等待某个goroutine接收我的消息\n\t    }\n\t    wg.Done()\n\t}\n\n示例输出：\n\n\t$ go run matching.go\n\tCody sent a message to Bob.\n\tAnna sent a message to Eva.\n\tNo one received Dave’s message.\n\n## 10. 并行计算\n\n![](http://www.nada.kth.se/~snilsson/concurrency/cpus.jpg)\n\n并发的一个应用是将一个大的计算切分成一些工作单元，调度到不同的CPU上同时地计算。\n\n将计算分布到多个CPU上更多是一门艺术，而不是一门科学。以下是一些经验法则：\n\n+ 每个工作单元应该花费大约100微秒到1毫秒的时间用于计算。如果单元粒度太小，切分问题以及调度子问题的管理开销可能就会太大。如果单元粒度太大，整个计算也许不得不等待一个慢的工作项结束。这种缓慢可能因为多种原因而产生，比如：调度、其他进程的中断或者糟糕的内存布局。（注意：工作单元的数目是不依赖于CPU的数目的）\n+ 尽可能减小共享的数据量。并发写操作的代价非常大，特别是如果goroutine运行在不同的CPU上。读操作之间的数据共享则通常不会是个问题。\n+ 数据访问尽量利用良好的局部性。如果数据能保持在缓存中，数据加载和存储将会快得多得多，这对于写操作也格外地重要。\n\n下面的这个示例展示如何切分一个开销很大的计算并将其分布在所有可用的CPU上进行计算。先看一下有待优化的代码：\n\n[convolution.go](http://www.nada.kth.se/~snilsson/concurrency/src/convolution.go):\n\n\ttype Vector []float64\n\n\t// 函数Convolve 计算 w = u * v，其中 w[k] = Σ u[i]*v[j], i + j = k\n\t// 先决条件：len(u) \u003e 0, len(v) \u003e 0\n\tfunc Convolve(u, v Vector) (w Vector) {\n\t    n := len(u) + len(v) - 1\n\t    w = make(Vector, n)\n\n\t    for k := 0; k \u003c n; k++ {\n\t        w[k] = mul(u, v, k)\n\t    }\n\t    return\n\t}\n\n\t// 函数mul 返回 Σ u[i]*v[j], i + j = k.\n\tfunc mul(u, v Vector, k int) (res float64) {\n\t    n := min(k+1, len(u))\n\t    j := min(k, len(v)-1)\n\t    for i := k - j; i \u003c n; i, j = i+1, j-1 {\n\t        res += u[i] * v[j]\n\t    }\n\t    return\n\t}\n\n思路很简单：确定合适大小的工作单元，然后在不同的goroutine中执行每个工作单元。以下是并发版本的 Convolve：\n\n\tfunc Convolve(u, v Vector) (w Vector) {\n\t    n := len(u) + len(v) - 1\n\t    w = make(Vector, n)\n\n\t    // 将 w 切分成花费 ~100μs-1ms 用于计算的工作单元\n\t    size := max(1, 1\u003c\u003c20/n)\n\n\t    wg := new(sync.WaitGroup)\n\t    wg.Add(1 + (n-1)/size)\n\t    for i := 0; i \u003c n \u0026\u0026 i \u003e= 0; i += size { // 整型溢出后 i \u003c 0\n\t        j := i + size\n\t        if j \u003e n || j \u003c 0 { // 整型溢出后 j \u003c 0\n\t            j = n\n\t        }\n\n\t        // 这些goroutine共享内存，但是只读\n\t        go func(i, j int) {\n\t            for k := i; k \u003c j; k++ {\n\t                w[k] = mul(u, v, k)\n\t            }\n\t            wg.Done()\n\t        }(i, j)\n\t    }\n\t    wg.Wait()\n\t    return\n\t}\n\n工作单元定义之后，通常情况下最好将调度工作交给运行时和操作系统。然而，对于Go 1.* 你也许需要告诉运行时希望多少个goroutine来同时地运行代码。\n\n\tfunc init() {\n\t    numcpu := runtime.NumCPU()\n\t    runtime.GOMAXPROCS(numcpu) // 尝试使用所有可用的CPU\n\t}\n","Tags":["golang"],"CreateTime":1432188758,"EditTime":1432188758,"UpdateTime":1432188758,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":118}