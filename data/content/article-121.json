{"Id":121,"Title":"C语言基础（3-4)-位运算","Slug":"2014-11-13-12","Text":"### 语言位运算符：与、或、异或、取反、左移和右移\n----\n位运算是指按二进制进行的运算。在系统软件中，常常需要处理二进制位的问题。C语言提供了6个位操作运算符。这些运算符只能用于整型操作数，即只能用于带符号或无符号的char,short,int与long类型。\n\n\u003e\u003e C语言提供的位运算符列表：\n\n    \u0026   按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0\n    |   按位或 两个相应的二进制位中只要有一个为1，该位的结果值为1\n    ^   按位异或 若参加运算的两个二进制位值相同则为0，否则为1\n    ~   取反 ~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1变0\n    \u003c\u003c  左移 用来将一个数的各二进制位全部左移N位，右补0\n    \u003e\u003e  右移 将一个数的各二进制位右移N位，移到右端的低位被舍弃，对于无符号数，高位补0\n\n### 1、“按位与”运算符（\u0026）\n   按位与是指：参加运算的两个数据，按二进制位进行“与”运算。如果两个相应的二进制位都为１，则该位的结果值为1；否则为0。这里的1可以理解为逻辑中的true,0可以理解为逻辑中的false。按位与其实与逻辑上“与”的运算规则一致。逻辑上的“与”，要求运算数全真，结果才为真。若，A=true,B=true,则A∩B=true 例如：3\u00265 3的二进制编码是11(2)。（为了区分十进制和其他进制，本文规定，凡是非十进制的数据均在数据后面加上括号，括号中注明其进制，二进制则标记为2）内存储存数据的基本单位是字节（Byte），一个字节由8个位（bit)所组成。位是用以描述电脑数据量的最小单位。二进制系统中，每个0或1就是一个位。将11（2）补足成一个字节，则是00000011（2）。5的二进制编码是101（2），将其补足成一个字节，则是00000101（2）\n\n按位与运算：\n\n    00000011(2)\n    \u002600000101(2)\n    00000001(2)\n由此可知`3\u00265=1`\nc语言代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n      int a=3;\n      int b = 5;\n      printf(\"%d\",a\u0026b);\n    }\n按位与的用途：\n+++++ （1）清零\n若想对一个存储单元清零，即使其全部二进制位为0，只要找一个二进制数，其中各个位符合一下条件：\n\n原来的数中为1的位，新数中相应位为0。然后使二者进行\u0026运算，即可达到清零目的。\n例：原数为43，即00101011（2），另找一个数，设它为148，即10010100（2），将两者按位与运算：\n    00101011（2）\n    \u002610010100（2）\n    00000000（2）\nc语言源代码：\n    #include \u003cstdio.h\u003e\n    main()\n    {\n        int a=43;\n        int b = 148;\n        printf(\"%d\",a\u0026b);\n    }\n#####（2）取一个数中某些指定位\n\n\u003e\u003e若有一个整数a(2byte),想要取其中的低字节，只需要将a与8个1按位与即可。\n\n    a 00101100 10101100\n    b 00000000 11111111\n    c 00000000 10101100\n    \n#####（3）保留指定位：\n与一个数进行“按位与”运算，此数在该位取1.\n例如：有一数84，即01010100（2），想把其中从左边算起的第3，4，5，7，8位保留下来，\n\n运算如下：\n\n    01010100(2)\n    \u002600111011(2)\n    00010000(2)\n    即：a=84,b=59\n        c=a\u0026b=16\n        \nc语言源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n        int a=84;\n        int b = 59;\n        printf(\"%d\",a\u0026b);\n    }\n\n### 2、“按位或”运算符（|）\n两个相应的二进制位中只要有一个为1，该位的结果值为1。借用逻辑学中或运算的话来说就是，一真为真。\n\n例如：60（8）|17（8）,将八进制60与八进制17进行按位或运算。\n\n    00110000\n    |00001111\n    00111111 \n    \nc语言源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n        int a=060;\n        int b = 017;\n        printf(\"%d\",a|b);\n    }\n应用：按位或运算常用来对一个数据的某些位定值为1。例如：如果想使一个数a的低4位改为1，则只需要将a与17（8）进行按位或运算即可。\n\n\n### ３、按位异或\n例如：ａ＝３，即11（2）；ｂ＝４，即100（2）。\n\n想将ａ和ｂ的值互换，可以用以下赋值语句实现：\n\n    ａ＝a∧b;\n    ｂ＝b∧a;\n    ａ＝a∧b;\n    ａ＝011(2)\n    （∧）ｂ＝100(2)\n    ａ＝111(2)（a∧b的结果，a已变成７）\n    （∧）ｂ＝100(2)\n    ｂ＝011(2)（b∧a的结果，b已变成３）\n    （∧）ａ＝111(2)\n    ａ＝100（2）（a∧b的结果，a已变成４）\n    \n等效于以下两步：\n\n    ① 执行前两个赋值语句：“ａ＝ａ∧ｂ；”和“ｂ＝ｂ∧ａ；”相当于b=b∧(a∧b)。\n    ② 再执行第三个赋值语句： ａ＝ａ∧ｂ。由于a的值等于（ａ∧ｂ），b的值等于（ｂ∧ａ∧ｂ），\n\n因此，相当于a=ａ∧ｂ∧ｂ∧ａ∧ｂ，即a的值等于ａ∧ａ∧ｂ∧ｂ∧ｂ，等于ｂ。\n\nc语言源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n        int a=3;\n        int b = 4;\n        a=a^b;\n        b=b^a;\n        a=a^b;\n        printf(\"a=%d b=%d\",a,b);\n    }\n\n### 4、“取反”运算符（~）\n他是一元运算符，用于求整数的二进制反码，即分别将操作数各二进制位上的1变为0，0变为1。\n例如：~77(8)\n\n源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n      int a=077;\n      printf(\"%d\",~a);\n    }\n\n\n### 5、左移运算符（\u003c\u003c）\n\n左移运算符是用来将一个数的各二进制位左移若干位，移动的位数由右操作数指定（右操作数必须是非负值).其右边空出的位用0填补，高位左移溢出则舍弃该高位。\n例如：将a的二进制数左移2位，右边空出的位补0，左边溢出的位舍弃。若a=15,即00001111（2），左移2位得00111100（2）。\n\n源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n      int a=15;\n      printf(\"%d\",a\u003c\u003c2);\n    }\n\n左移1位相当于该数乘以2，左移2位相当于该数乘以2*2＝4,15＜＜2=60，即乘了４。但此结论只适用于该数左移时被溢出舍弃的高位中不包含1的情况。\n\n假设以一个字节（８位）存一个整数，若ａ为无符号整型变量，则ａ＝64时，左移一位时溢出的是0，而左移2位时，溢出的高位中包含1。\n\n### 6、右移运算符（\u003e\u003e）\n\n右移运算符是用来将一个数的各二进制位右移若干位，移动的位数由右操作数指定（右操作数必须是非负值），移到右端的低位被舍弃，对于无符号数，高位补0。对于有符号数，某些机器将对左边空出的部分用符号位填补（即“算术移位”），而另一些机器则对左边空出的部分用0填补（即“逻辑移位”）。\n\n注意：对无符号数,右移时左边高位移入0；对于有符号的值,如果原来符号位为0(该数为正),则左边也是移入0。如果符号位原来为1(即负数),则左边移入0还是1,要取决于所用的计算机系统。有的系统移入0,有的系统移入1。移入0的称为“逻辑移位”,即简单移位；移入1的称为“算术移位”。 \n\n例： a的值是八进制数113755： \n\n     a:1001011111101101 （用二进制形式表示）\n     a\u003e\u003e1: 0100101111110110 (逻辑右移时)\n     a\u003e\u003e1: 1100101111110110 (算术右移时)\n\n在有些系统中,a\u003e\u003e1得八进制数045766,而在另一些系统上可能得到的是145766。Turbo C和其他一些C编译采用的是算术右移,即对有符号数右移时,如果符号位原来为1，左面移入高位的是1。\n\n源代码：\n\n    #include \u003cstdio.h\u003e\n    main()\n    {\n      int a=0113755;\n      printf(\"%d\",a\u003e\u003e1);\n    }\n\n### 7、位运算赋值运算符\n\n位运算符与赋值运算符可以组成复合赋值运算符。\n\n       例: \u0026=, |=, \u003e\u003e=, \u003c\u003c=, ∧=\n       例： a \u0026 = b相当于 a = a \u0026 b\n             a \u003c\u003c =2相当于a = a \u003c\u003c 2","Tags":["C"],"CreateTime":1415864784,"EditTime":1415865010,"UpdateTime":1415864784,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":15}