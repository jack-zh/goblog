{"Id":196,"Title":"Docker基础技术：Linux Namespace（上）","Slug":"2015-04-17-2","Text":"转自  [coolshell.cn](http://coolshell.cn/articles/17010.html) 原作者[ 陈皓](http://coolshell.cn) \n\n![](/static/upload/201504171052256.png)\n\n\u003e 时下最热的技术莫过于Docker了，很多人都觉得Docker是个新技术，其实不然，Docker除了其编程语言用go比较新外，其实它还真不是个新东西，也就是个新瓶装旧酒的东西，所谓的The New “Old Stuff”。Docker和Docker衍生的东西用到了很多很酷的技术，我会用几篇 文章来把这些技术给大家做个介绍，希望通过这些文章大家可以自己打造一个山寨版的docker。\n\n\u003e 当然，文章的风格一定会尊重时下的“流行”——我们再也没有整块整块的时间去看书去专研，而我们只有看微博微信那样的碎片时间（那怕我们有整块的时间，也被那些在手机上的APP碎片化了）。所以，这些文章的风格必然坚持“马桶风格”（希望简单到占用你拉一泡屎就时间，而且你还不用动脑子，并能学到些东西）\n\n\u003e 废话少说，我们开始。先从Linux Namespace开始。\n\n## 简介\n\nLinux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。\n\n举个例子，我们都知道，Linux下的超级父亲进程的PID是1，所以，同chroot一样，如果我们可以把用户的进程空间jail到某个进程分支下，并像chroot那样让其下面的进程 看到的那个超级父进程的PID为1，于是就可以达到资源隔离的效果了（不同的PID namespace中的进程无法看到彼此）\n\n**Linux Namespace 有如下种类**，官方文档在这里《[Namespace in Operation](http://lwn.net/Articles/531114/)》\n\n分类|系统调用参数|\t相关内核版本\n---|---|---\nMount namespaces|CLONE_NEWNS|[Linux 2.4.19](http://lwn.net/2001/0301/a/namespaces.php3)\nUTS namespaces|CLONE_NEWUTS|[Linux 2.6.19](http://lwn.net/Articles/179345/)\nIPC namespaces|CLONE_NEWIPC|[Linux 2.6.19](http://lwn.net/Articles/187274/)\nPID namespaces|CLONE_NEWPID|[Linux 2.6.24](http://lwn.net/Articles/259217/)\nNetwork namespaces|CLONE_NEWNET|[始于Linux 2.6.24 完成于 Linux 2.6.29](http://lwn.net/Articles/219794/)\nUser namespaces|CLONE_NEWUSER|[始于 Linux 2.6.23 完成于 Linux 3.8](http://lwn.net/Articles/528078/)\n\n主要是三个系统调用\n\n+ `clone()` - 实现线程的系统调用，用来创建一个新的进程，并可以通过设计上述参数达到隔离。\n+ `unshare()` - 使某进程脱离某个namespace\n+ `setns()` - 把某进程加入到某个namespace\n\nunshare() 和 setns() 都比较简单，大家可以自己man，我这里不说了。\n\n下面还是让我们来看一些示例（以下的测试程序最好在Linux 内核为3.8以上的版本中运行，我用的是ubuntu 14.04）。\n\n## clone()系统调用\n\n首先，我们来看一下一个最简单的clone()系统调用的示例，（后面，我们的程序都会基于这个程序做修改）：\n\n    #define _GNU_SOURCE\n    #include \u003csys/types.h\u003e\n    #include \u003csys/wait.h\u003e\n    #include \u003cstdio.h\u003e\n    #include \u003csched.h\u003e\n    #include \u003csignal.h\u003e\n    #include \u003cunistd.h\u003e\n     \n    /* 定义一个给 clone 用的栈，栈大小1M */\n    #define STACK_SIZE (1024 * 1024)\n    static char container_stack[STACK_SIZE];\n     \n    char* const container_args[] = {\n        \"/bin/bash\",\n        NULL\n    };\n     \n    int container_main(void* arg)\n    {\n        printf(\"Container - inside the container!\\n\");\n        /* 直接执行一个shell，以便我们观察这个进程空间里的资源是否被隔离了 */\n        execv(container_args[0], container_args); \n        printf(\"Something's wrong!\\n\");\n        return 1;\n    }\n     \n    int main()\n    {\n        printf(\"Parent - start a container!\\n\");\n        /* 调用clone函数，其中传出一个函数，还有一个栈空间的（为什么传尾指针，因为栈是反着的） */\n        int container_pid = clone(container_main, container_stack+STACK_SIZE, SIGCHLD, NULL);\n        /* 等待子进程结束 */\n        waitpid(container_pid, NULL, 0);\n        printf(\"Parent - container stopped!\\n\");\n        return 0;\n    }\n\n从上面的程序，我们可以看到，这和pthread基本上是一样的玩法。但是，对于上面的程序，父子进程的进程空间是没有什么差别的，父进程能访问到的子进程也能。\n\n下面， 让我们来看几个例子看看，Linux的Namespace是什么样的。\n\n## UTS Namespace\n\n下面的代码，我略去了上面那些头文件和数据结构的定义，只有最重要的部分。\n\n    int container_main(void* arg)\n    {\n        printf(\"Container - inside the container!\\n\");\n        sethostname(\"container\",10); /* 设置hostname */\n        execv(container_args[0], container_args);\n        printf(\"Something's wrong!\\n\");\n        return 1;\n    }\n     \n    int main()\n    {\n        printf(\"Parent - start a container!\\n\");\n        int container_pid = clone(container_main, container_stack+STACK_SIZE, \n                CLONE_NEWUTS | SIGCHLD, NULL); /*启用CLONE_NEWUTS Namespace隔离 */\n        waitpid(container_pid, NULL, 0);\n        printf(\"Parent - container stopped!\\n\");\n        return 0;\n    }\n\n运行上面的程序你会发现（需要root权限），子进程的hostname变成了 container。\n\n    hchen@ubuntu:~$ sudo ./uts\n    Parent - start a container!\n    Container - inside the container!\n    root@container:~# hostname\n    container\n    root@container:~# uname -n\n    container\n\n## IPC Namespace\n\nIPC全称 Inter-Process Communication，是Unix/Linux下进程间通信的一种方式，IPC有共享内存、信号量、消息队列等方法。所以，为了隔离，我们也需要把IPC给隔离开来，这样，只有在同一个Namespace下的进程才能相互通信。如果你熟悉IPC的原理的话，你会知道，IPC需要有一个全局的ID，即然是全局的，那么就意味着我们的Namespace需要对这个ID隔离，不能让别的Namespace的进程看到。\n\n要启动IPC隔离，我们只需要在调用clone时加上CLONE_NEWIPC参数就可以了。\n\n    int container_pid = clone(container_main, container_stack+STACK_SIZE, \n                CLONE_NEWUTS | CLONE_NEWIPC | SIGCHLD, NULL); \n\n首先，我们先创建一个IPC的Queue（如下所示，全局的Queue ID是0）\n\n    hchen@ubuntu:~$ ipcmk -Q \n    Message queue id: 0\n     \n    hchen@ubuntu:~$ ipcs -q\n    ------ Message Queues --------\n    key        msqid      owner      perms      used-bytes   messages    \n    0xd0d56eb2 0          hchen      644        0            0\n\n\n如果我们运行没有CLONE_NEWIPC的程序，我们会看到，在子进程中还是能看到这个全启的IPC Queue。\n\n    hchen@ubuntu:~$ sudo ./uts\n    Parent - start a container!\n    Container - inside the container!\n     \n    root@container:~# ipcs -q\n     \n    ------ Message Queues --------\n    key        msqid      owner      perms      used-bytes   messages    \n    0xd0d56eb2 0          hchen      644        0            0\n\n但是，如果我们运行加上了CLONE_NEWIPC的程序，我们就会下面的结果：\n\n    root@ubuntu:~$ sudo./ipc\n    Parent - start a container!\n    Container - inside the container!\n     \n    root@container:~/linux_namespace# ipcs -q\n     \n    ------ Message Queues --------\n    key        msqid      owner      perms      used-bytes   messages\n\n我们可以看到IPC已经被隔离了。\n\n## PID Namespace\n\n我们继续修改上面的程序：\n\n    int container_main(void* arg)\n    {\n        /* 查看子进程的PID，我们可以看到其输出子进程的 pid 为 1 */\n        printf(\"Container [%5d] - inside the container!\\n\", getpid());\n        sethostname(\"container\",10);\n        execv(container_args[0], container_args);\n        printf(\"Something's wrong!\\n\");\n        return 1;\n    }\n     \n    int main()\n    {\n        printf(\"Parent [%5d] - start a container!\\n\", getpid());\n        /*启用PID namespace - CLONE_NEWPID*/\n        int container_pid = clone(container_main, container_stack+STACK_SIZE, \n                CLONE_NEWUTS | CLONE_NEWPID | SIGCHLD, NULL); \n        waitpid(container_pid, NULL, 0);\n        printf(\"Parent - container stopped!\\n\");\n        return 0;\n\n运行结果如下（我们可以看到，子进程的pid是1了）：\n\n    hchen@ubuntu:~$ sudo ./pid\n    Parent [ 3474] - start a container!\n    Container [    1] - inside the container!\n    root@container:~# echo $$\n    1\n你可能会问，PID为1有个毛用啊？我们知道，在传统的UNIX系统中，PID为1的进程是init，地位非常特殊。他作为所有进程的父进程，有很多特权（比如：屏蔽信号等），另外，其还会为检查所有进程的状态，我们知道，如果某个子进程脱离了父进程（父进程没有wait它），那么init就会负责回收资源并结束这个子进程。所以，要做到进程空间的隔离，首先要创建出PID为1的进程，最好就像chroot那样，把子进程的PID在容器内变成1。\n\n**但是，我们会发现，在子进程的shell里输入ps,top等命令，我们还是可以看得到所有进程**。说明并没有完全隔离。这是因为，像ps, top这些命令会去读/proc文件系统，所以，因为/proc文件系统在父进程和子进程都是一样的，所以这些命令显示的东西都是一样的。\n\n所以，我们还需要对文件系统进行隔离。\n\n## Mount Namespace\n\n下面的例程中，我们在启用了mount namespace并在子进程中重新mount了/proc文件系统。\n\n    int container_main(void* arg)\n    {\n        printf(\"Container [%5d] - inside the container!\\n\", getpid());\n        sethostname(\"container\",10);\n        /* 重新mount proc文件系统到 /proc下 */\n        system(\"mount -t proc proc /proc\");\n        execv(container_args[0], container_args);\n        printf(\"Something's wrong!\\n\");\n        return 1;\n    }\n     \n    int main()\n    {\n        printf(\"Parent [%5d] - start a container!\\n\", getpid());\n        /* 启用Mount Namespace - 增加CLONE_NEWNS参数 */\n        int container_pid = clone(container_main, container_stack+STACK_SIZE, \n                CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);\n        waitpid(container_pid, NULL, 0);\n        printf(\"Parent - container stopped!\\n\");\n        return 0;\n    }\n\n运行结果如下：\n\n    hchen@ubuntu:~$ sudo ./pid.mnt\n    Parent [ 3502] - start a container!\n    Container [    1] - inside the container!\n    root@container:~# ps -elf \n    F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD\n    4 S root         1     0  0  80   0 -  6917 wait   19:55 pts/2    00:00:00 /bin/bash\n    0 R root        14     1  0  80   0 -  5671 -      19:56 pts/2    00:00:00 ps -elf\n\n上面，我们可以看到只有两个进程 ，而且pid=1的进程是我们的/bin/bash。我们还可以看到/proc目录下也干净了很多：\n\n    root@container:~# ls /proc\n    1          dma          key-users   net            sysvipc\n    16         driver       kmsg        pagetypeinfo   timer_list\n    acpi       execdomains  kpagecount  partitions     timer_stats\n    asound     fb           kpageflags  sched_debug    tty\n    buddyinfo  filesystems  loadavg     schedstat      uptime\n    bus        fs           locks       scsi           version\n    cgroups    interrupts   mdstat      self           version_signature\n    cmdline    iomem        meminfo     slabinfo       vmallocinfo\n    consoles   ioports      misc        softirqs       vmstat\n    cpuinfo    irq          modules     stat           zoneinfo\n    crypto     kallsyms     mounts      swaps\n    devices    kcore        mpt         sys\n    diskstats  keys         mtrr        sysrq-trigger\n\n下图，我们也可以看到在子进程中的top命令只看得到两个进程了。\n\n![](/static/upload/201504171052167.jpg )\n\n这里，多说一下。在通过CLONE_NEWNS创建mount namespace后，父进程会把自己的文件结构复制给子进程中。而子进程中新的namespace中的所有mount操作都只影响自身的文件系统，而不对外界产生任何影响。这样可以做到比较严格地隔离。\n\n你可能会问，我们是不是还有别的一些文件系统也需要这样mount? 是的。\n\n## Docker的 Mount Namespace\n\n下面我将向演示一个“山寨镜像”，其模仿了Docker的Mount Namespace。\n\n首先，我们需要一个rootfs，也就是我们需要把我们要做的镜像中的那些命令什么的copy到一个rootfs的目录下，我们模仿Linux构建如下的目录：\n\n    hchen@ubuntu:~/rootfs$ ls\n    bin  dev  etc  home  lib  lib64  mnt  opt  proc  root  run  sbin  sys  tmp  usr  var\n\n然后，我们把一些我们需要的命令copy到 rootfs/bin目录中（sh命令必需要copy进去，不然我们无法 chroot ）\n\n    hchen@ubuntu:~/rootfs$ ls ./bin ./usr/bin\n     \n    ./bin:\n    bash   chown  gzip      less  mount       netstat  rm     tabs  tee      top       tty\n    cat    cp     hostname  ln    mountpoint  ping     sed    tac   test     touch     umount\n    chgrp  echo   ip        ls    mv          ps       sh     tail  timeout  tr        uname\n    chmod  grep   kill      more  nc          pwd      sleep  tar   toe      truncate  which\n\n    ./usr/bin:\n    awk  env  groups  head  id  mesg  sort  strace  tail  top  uniq  vi  wc  xargs\n\n注：你可以使用ldd命令把这些命令相关的那些so文件copy到对应的目录：\n\n    hchen@ubuntu:~/rootfs/bin$ ldd bash\n        linux-vdso.so.1 =\u003e  (0x00007fffd33fc000)\n        libtinfo.so.5 =\u003e /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f4bd42c2000)\n        libdl.so.2 =\u003e /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4bd40be000)\n        libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4bd3cf8000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f4bd4504000)\n\n下面是我的rootfs中的一些so文件：\n\n    hchen@ubuntu:~/rootfs$ ls ./lib64 ./lib/x86_64-linux-gnu/\n     \n    ./lib64:\n    ld-linux-x86-64.so.2\n     \n    ./lib/x86_64-linux-gnu/:\n    libacl.so.1      libmemusage.so         libnss_files-2.19.so    libpython3.4m.so.1\n    libacl.so.1.1.0  libmount.so.1          libnss_files.so.2       libpython3.4m.so.1.0\n    libattr.so.1     libmount.so.1.1.0      libnss_hesiod-2.19.so   libresolv-2.19.so\n    libblkid.so.1    libm.so.6              libnss_hesiod.so.2      libresolv.so.2\n    libc-2.19.so     libncurses.so.5        libnss_nis-2.19.so      libselinux.so.1\n    libcap.a         libncurses.so.5.9      libnss_nisplus-2.19.so  libtinfo.so.5\n    libcap.so        libncursesw.so.5       libnss_nisplus.so.2     libtinfo.so.5.9\n    libcap.so.2      libncursesw.so.5.9     libnss_nis.so.2         libutil-2.19.so\n    libcap.so.2.24   libnsl-2.19.so         libpcre.so.3            libutil.so.1\n    libc.so.6        libnsl.so.1            libprocps.so.3          libuuid.so.1\n    libdl-2.19.so    libnss_compat-2.19.so  libpthread-2.19.so      libz.so.1\n    libdl.so.2       libnss_compat.so.2     libpthread.so.0\n    libgpm.so.2      libnss_dns-2.19.so     libpython2.7.so.1\n    libm-2.19.so     libnss_dns.so.2        libpython2.7.so.1.0\n\n包括这些命令依赖的一些配置文件：\n\n    hchen@ubuntu:~/rootfs$ ls ./etc\n    bash.bashrc  group  hostname  hosts  ld.so.cache  nsswitch.conf  passwd  profile  \n    resolv.conf  shadow\n\n\n你现在会说，我靠，有些配置我希望是在容器起动时给他设置的，而不是hard code在镜像中的。比如：/etc/hosts，/etc/hostname，还有DNS的/etc/resolv.conf文件。好的。那我们在rootfs外面，我们再创建一个conf目录，把这些文件放到这个目录中。\n\n    hchen@ubuntu:~$ ls ./conf\n    hostname     hosts     resolv.conf\n\n这样，我们的父进程就可以动态地设置容器需要的这些文件的配置， 然后再把他们mount进容器，这样，容器的镜像中的配置就比较灵活了。\n\n好了，终于到了我们的程序。\n\n    #define _GNU_SOURCE\n    #include \u003csys/types.h\u003e\n    #include \u003csys/wait.h\u003e\n    #include \u003csys/mount.h\u003e\n    #include \u003cstdio.h\u003e\n    #include \u003csched.h\u003e\n    #include \u003csignal.h\u003e\n    #include \u003cunistd.h\u003e\n     \n    #define STACK_SIZE (1024 * 1024)\n     \n    static char container_stack[STACK_SIZE];\n    char* const container_args[] = {\n        \"/bin/bash\",\n        \"-l\",\n        NULL\n    };\n     \n    int container_main(void* arg)\n    {\n        printf(\"Container [%5d] - inside the container!\\n\", getpid());\n     \n        //set hostname\n        sethostname(\"container\",10);\n     \n        //remount \"/proc\" to make sure the \"top\" and \"ps\" show container's information\n        if (mount(\"proc\", \"rootfs/proc\", \"proc\", 0, NULL) !=0 ) {\n            perror(\"proc\");\n        }\n        if (mount(\"sysfs\", \"rootfs/sys\", \"sysfs\", 0, NULL)!=0) {\n            perror(\"sys\");\n        }\n        if (mount(\"none\", \"rootfs/tmp\", \"tmpfs\", 0, NULL)!=0) {\n            perror(\"tmp\");\n        }\n        if (mount(\"udev\", \"rootfs/dev\", \"devtmpfs\", 0, NULL)!=0) {\n            perror(\"dev\");\n        }\n        if (mount(\"devpts\", \"rootfs/dev/pts\", \"devpts\", 0, NULL)!=0) {\n            perror(\"dev/pts\");\n        }\n        if (mount(\"shm\", \"rootfs/dev/shm\", \"tmpfs\", 0, NULL)!=0) {\n            perror(\"dev/shm\");\n        }\n        if (mount(\"tmpfs\", \"rootfs/run\", \"tmpfs\", 0, NULL)!=0) {\n            perror(\"run\");\n        }\n        /* \n         * 模仿Docker的从外向容器里mount相关的配置文件 \n         * 你可以查看：/var/lib/docker/containers/\u003ccontainer_id\u003e/目录，\n         * 你会看到docker的这些文件的。\n         */\n        if (mount(\"conf/hosts\", \"rootfs/etc/hosts\", \"none\", MS_BIND, NULL)!=0 ||\n              mount(\"conf/hostname\", \"rootfs/etc/hostname\", \"none\", MS_BIND, NULL)!=0 ||\n              mount(\"conf/resolv.conf\", \"rootfs/etc/resolv.conf\", \"none\", MS_BIND, NULL)!=0 ) {\n            perror(\"conf\");\n        }\n        /* 模仿docker run命令中的 -v, --volume=[] 参数干的事 */\n        if (mount(\"/tmp/t1\", \"rootfs/mnt\", \"none\", MS_BIND, NULL)!=0) {\n            perror(\"mnt\");\n        }\n     \n        /* chroot 隔离目录 */\n        if ( chdir(\"./rootfs\") != 0 || chroot(\"./\") != 0 ){\n            perror(\"chdir/chroot\");\n        }\n     \n        execv(container_args[0], container_args);\n        perror(\"exec\");\n        printf(\"Something's wrong!\\n\");\n        return 1;\n    }\n     \n    int main()\n    {\n        printf(\"Parent [%5d] - start a container!\\n\", getpid());\n        int container_pid = clone(container_main, container_stack+STACK_SIZE, \n                CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);\n        waitpid(container_pid, NULL, 0);\n        printf(\"Parent - container stopped!\\n\");\n        return 0;\n    }\n\n\nsudo运行上面的程序，你会看到下面的挂载信息以及一个所谓的“镜像”：\n\n    hchen@ubuntu:~$ sudo ./mount\n    Parent [ 4517] - start a container!\n    Container [    1] - inside the container!\n    root@container:/# mount\n    proc on /proc type proc (rw,relatime)\n    sysfs on /sys type sysfs (rw,relatime)\n    none on /tmp type tmpfs (rw,relatime)\n    udev on /dev type devtmpfs (rw,relatime,size=493976k,nr_inodes=123494,mode=755)\n    devpts on /dev/pts type devpts (rw,relatime,mode=600,ptmxmode=000)\n    tmpfs on /run type tmpfs (rw,relatime)\n    /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/hosts type ext4 (rw,relatime,errors=remount-ro,data=ordered)\n    /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/hostname type ext4 (rw,relatime,errors=remount-ro,data=ordered)\n    /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/resolv.conf type ext4 (rw,relatime,errors=remount-ro,data=ordered)\n     \n    root@container:/# ls /bin /usr/bin\n    /bin:\n    bash   chmod  echo  hostname  less  more    mv   ping  rm   sleep  tail  test     top    truncate  uname\n    cat    chown  grep  ip        ln    mount   nc   ps    sed  tabs   tar   timeout  touch  tty       which\n    chgrp  cp     gzip  kill      ls    mountpoint  netstat  pwd   sh   tac    tee   toe      tr     umount\n     \n    /usr/bin:\n    awk  env  groups  head  id  mesg  sort  strace  tail  top  uniq  vi  wc  xargs\n\n关于如何做一个chroot的目录，这里有个工具叫DebootstrapChroot，你可以顺着链接去看看（英文的哦）\n\n接下来的事情，你可以自己玩了，我相信你的想像力 。：）\n\n在下一篇，我将向你介绍User Namespace、Network Namespace以及Namespace的其它东西。\n\n","Tags":["docker"],"CreateTime":1429239204,"EditTime":1429239204,"UpdateTime":1429239204,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":37}