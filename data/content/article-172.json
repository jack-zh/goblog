{"Id":172,"Title":"Python SocketServer聊天室","Slug":"2015-02-06-1","Text":"带新人，让他熟悉Socket和多线程，写一个简易聊天室\n\n代码下载[chat.zip](/static/upload/2015060417142910.zip)\n\n不废话，见代码：\n\n##### server.py\n\n    try:\n      import SocketServer\n    except Exception as e:\n      import socketserver as SocketServer\n\n    import re\n    import socket\n\n    class ClientError(Exception):\n      pass\n\n\n    class PythonChatServer(SocketServer.ThreadingTCPServer):\n\n      def __init__(self, server_address, RequestHandlerClass):\n        SocketServer.ThreadingTCPServer.__init__(self, server_address, RequestHandlerClass)\n        self.users = {}\n\n\n    class RequestHandler(SocketServer.StreamRequestHandler):\n\n      NICKNAME = re.compile('^[A-Za-z0-9_-]+$')\n\n      def handle(self):\n        self.nickname = None\n\n        self.privateMessage(\"Who are you?\")\n        nickname=self._readline()\n        done = False\n        try:\n          self.nickCommand(nickname)\n          self.privateMessage('Hello %s, welcome to the Python Chat Server.' % nickname)\n          self.broadcast('%s has joined the chat.' %nickname,False)\n        except (ClientError) as error:\n          self.privateMessage(error.args[0])\n          done = True\n        except socket.error:\n          done = True\n\n        while not done:\n          try:\n            done = self.processInput()\n          except (ClientError) as error:\n            self.privateMessage(str(error))\n          except socket.error:\n            done = True\n\n      def finish(self):\n        if self.nickname:\n          message = '%s has quit.' % self.nickname\n          if hasattr(self, 'partingWords'):\n            message = '%s has quit: %s' % (self.nickname, self.partingWords)\n          self.broadcast(message, False)\n\n          if self.server.users.get(self.nickname):\n            del(self.server.users[self.nickname])\n        self.request.close()\n\n      def processInput(self):\n        done = False\n        l = self._readline()\n        command, arg = self._parseCommand(l)\n        if command:\n          done = command(arg)\n        else:\n          l = '\u003c%s\u003e %s\\n' % (self.nickname, l)\n          self.broadcast(l)\n        return done\n\n      def nickCommand(self,nickname):\n        if not nickname:\n          raise ClientError('No nickname provided.')\n        if not self.NICKNAME.match(nickname):\n          raise ClientError('Invalid nickname: %s' % nickname)\n        if nickname == self.nickname:\n          raise ClientError('You\\'re already known as %s.' % nickname)\n        if self.server.users.get(nickname,None):\n          raise ClientError('There\\'s already a user named \"%s\" here.' %nickname)\n        oldNickname = None\n        if self.nickname:\n          oldNickname=self.nickname\n          del(self.server.users[self.nickname])\n        self.server.users[nickname]=self.wfile\n        self.nickname=nickname\n        if oldNickname:\n          self.broadcast('%s is now known as %s' % (oldNickname, self.nickname))\n\n      def quitCommand(self, partingWords):\n        if partingWords:\n          self.partingWords = partingWords\n        return True\n\n      def namesCommand(self, ignored):\n        self.privateMessage(', '.join(self.server.users.keys()))\n\n      def broadcast(self, message, includeThisUser=True):\n        message = self._ensureNewline(message)\n        for user, output in self.server.users.items():\n          if includeThisUser or user != self.nickname:\n            output.write(message.encode('utf-8'))\n\n      def privateMessage(self, message):\n        self.wfile.write(self._ensureNewline(message).encode('utf-8'))\n\n      def _readline(self):\n        return self.rfile.readline().strip().decode('utf-8')\n\n      def _ensureNewline(self, s):\n        if s and s[-1] !='\\n':\n          s += '\\r\\n'\n        return s\n\n      def _parseCommand(self, input):\n        commandMethod, arg = None, None\n        if input and input[0]=='/':\n          if len(input) \u003c 2:\n            raise ClientError('Invalid command: \"%s\"' % input)\n          commandAndArg = input[1:].split(' ',1)\n          if len(commandAndArg) == 2:\n            command, arg = commandAndArg\n          else:\n            command = commandAndArg[0]\n          commandMethod = getattr(self, command + 'Command', None)\n          if not commandMethod:\n            raise ClientError('No such command: \"%s\"' %command)\n        return commandMethod, arg\n\n\n    if __name__ == '__main__':\n      import sys\n      if len(sys.argv) \u003c 3:\n        print('Usage: %s [hostname] [port number]' %sys.argv[0])\n        sys.exit(1)\n      hostname = sys.argv[1]\n      port = int(sys.argv[2])\n      PythonChatServer((hostname,port),RequestHandler).serve_forever()\n \n##### client.py\n\n    import socket\n    import select\n    import sys\n    import os\n    from threading import Thread\n\n\n    class ChatClient:\n\n        def __init__(self, host, port, nickname):\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.connect((host, port))\n            self.input = self.socket.makefile('rb', 0)\n            self.output = self.socket.makefile('wb', 0)\n\n            authenticationDemand = self.input.readline().decode('utf-8')\n            if not authenticationDemand.startswith(\"Who are you?\"):\n                raise Exception (\"This doesn't seem to be a Python Chat Server.\")\n            self.output.write((nickname + '\\r\\n').encode('utf-8'))\n            response = self.input.readline().strip().decode('utf-8')\n            if not response.startswith(\"Hello\"):\n                raise Exception (response)\n            print(response)\n\n            self.output.write(('/names\\r\\n').encode('utf-8'))\n            print(\"Currently in the chat room:\", self.input.readline().decode('utf-8').strip())\n\n            self.run()\n\n        def run(self):        \n            propagateStandardInput = self.PropagateStandardInput(self.output)\n            propagateStandardInput.start()\n            inputText = True\n            while inputText:\n                inputText = self.input.readline().decode('utf-8')\n                if inputText:\n                    print (inputText.strip())\n            propagateStandardInput.done = True\n\n        class PropagateStandardInput(Thread):\n            def __init__(self, output):\n                Thread.__init__(self)\n                self.setDaemon(True)\n                self.output = output\n                self.done = False\n\n            def run(self):\n                while not self.done:\n                    inputText = sys.stdin.readline().strip()\n                    if inputText:\n                        self.output.write((inputText + '\\r\\n').encode('utf-8'))\n\n\n    if __name__ == '__main__':\n        import sys\n        try:\n            import pwd\n            defaultNickname = pwd.getpwuid(os.getuid())[0]\n        except ImportError:\n            defaultNickname = None\n\n        if len(sys.argv) \u003c 3 or not defaultNickname and len(sys.argv) \u003c 4:\n            print('Usage: %s [hostname] [port number] [username]' % sys.argv[0])\n            sys.exit(1)\n\n        hostname = sys.argv[1]\n        port = int(sys.argv[2])\n\n        if len(sys.argv) \u003e 3:\n            nickname = sys.argv[3]\n        else:\n            nickname = defaultNickname\n\n        ChatClient(hostname, port, nickname)","Tags":["python"],"CreateTime":1423212859,"EditTime":1433409290,"UpdateTime":1423212859,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":648}