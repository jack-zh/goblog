{"Id":29,"Title":"高效程序员的修炼-加强代码测试，别让他太差劲","Slug":"2014-10-27-2","Text":"### 加强代码测试，别让他太差劲\n\n##### 与客户共患难\n  + 把开发者带到客户的战壕里面去\n  + 让开发者知道客户的艰辛\n  + 开发者与客户共患难\n\n##### 结交“混世魔猴”\n  + 把事情弄到最坏，然后再最坏的基础上看上去做到完美\n  + 后备服务器\n  + 做容错\n  + 去掉冗余\n  + 立即去把它变得更好\n\n##### 代码评审\n  + 同级评审 意义最大\n  + 评审不是在浪费时间\n    + 加速开发\n    + 增强自身\n    + 改进自身\n    + 健壮性\n    + 减少后期投入\n  + 加大测试力度\n\n##### 我同情那些不写单元测试的傻瓜\n  + 单元测试可以证明你的代码是能真正解决问题的\n  + 你可以获得一个底层模块的回归测试工具\n  + 你可以在不破坏现有功能的基础上持续改进设计\n  + 一边写单元测试 一边写代码  这种方式更有乐趣\n  + 他们可以被用来真是的展示开发进度\n  + 单元测试可以用来做示例代码\n  + 他逼你在写代码之前做好计划\n  + 它可以降低Bug修复成本\n  + 单元测试甚至比代码审查效果还要好\n  + 它实际上为程序员消除了工作上的障碍\n  + 单元测试可以催生更好的设计\n  + 他比不写单元测试而直接上代码效率更高\n  + `测试驱动开发`？\n\n##### 单元测试与Beta测试的对比\n  + 有些Bug是无关紧要的\n  + 真正的测试人员讨厌你的代码\n  + 用户是疯狂的 Beta吧 亲\n\n##### 低保真的可用性测试\n  + 你不找来真正的用户来测试，你是不知道你的程序是否可以运行的\n  + 我该在什么时候测试？ 持续测试\n  + 我需要找多少用户？ 3，4个\n  + 要找什么样的用户？随机的  不要放过你的朋友\n  + 测试持续时间？尽量保持简单 一个小时以内\n  + 在哪里测试？ 任何地方 不受干扰 观棋不语地点\n  + 测试人员的特质？耐心者\n  + 什么设备？屏幕录像软件 等\n  + 准备？文档\n  + 钱？还是要给的\n  + 对待结果？随你的变\n  + 《Don't make me think》\n\n##### 比程序崩溃更糟糕的是什么\n  + 1 程序能正常工作，从不崩溃\n  + 2 极少崩溃，基本碰不到\n  + 3 程序正常使用的情况下时有崩溃\n  + 4 程序正常实用下会出现死锁并停止响应\n  + 5 程序动不动就崩溃，根本没法用\n  + 6 程序导致用户数据丢失，并且(或者)引起系统崩溃\n  \n  + 快速失败是好的策略\n  + 在失败中缓过来\n\n  + 负起责任来 安全的修复问题\n  + 如果修复不了，保护用户数据","Tags":["高效程序员的修炼"],"CreateTime":1414392035,"EditTime":1414392035,"UpdateTime":1414392035,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":99}