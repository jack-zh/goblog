{"Id":61,"Title":"Simple-Haskell","Slug":"2014-10-28-7","Text":"    \n    -- 单行注释以两个破折号开头\n    {- 多行注释像这样\n       被一个闭合的块包围\n    -}\n    \n    ----------------------------------------------------\n    -- 1. 简单的数据类型和操作符\n    ----------------------------------------------------\n    \n    -- 你有数字\n    3 -- 3\n    -- 数学计算就像你所期待的那样\n    1 + 1 -- 2\n    8 - 1 -- 7\n    10 * 2 -- 20\n    35 / 5 -- 7.0\n    \n    -- 默认除法不是整除\n    35 / 4 -- 8.75\n    \n    -- 整除\n    35 `div` 4 -- 8\n    \n    -- 布尔值也简单\n    True\n    False\n    \n    -- 布尔操作\n    not True -- False\n    not False -- True\n    1 == 1 -- True\n    1 /= 1 -- False\n    1 \u003c 10 -- True\n    \n    -- 在上述的例子中，`not` 是一个接受一个值的函数。\n    -- Haskell 不需要括号来调用函数。。。所有的参数\n    -- 都只是在函数名之后列出来。因此，通常的函数调用模式是：\n    -- func arg1 arg2 arg3...\n    -- 查看关于函数的章节以获得如何写你自己的函数的相关信息。\n    \n    -- 字符串和字符\n    \"This is a string.\"\n    'a' -- 字符\n    '对于字符串你不能使用单引号。' -- 错误！\n    \n    -- 连结字符串\n    \"Hello \" ++ \"world!\" -- \"Hello world!\"\n    \n    -- 一个字符串是一系列字符\n    \"This is a string\" !! 0 -- 'T'\n    \n    \n    ----------------------------------------------------\n    -- 列表和元组\n    ----------------------------------------------------\n    \n    -- 一个列表中的每一个元素都必须是相同的类型\n    -- 下面两个列表一样\n    [1, 2, 3, 4, 5]\n    [1..5]\n    \n    -- 在 Haskell 你可以拥有含有无限元素的列表\n    [1..] -- 一个含有所有自然数的列表\n    \n    -- 因为 Haskell 有“懒惰计算”，所以无限元素的列表可以正常运作。这意味着\n    -- Haskell 可以只在它需要的时候计算。所以你可以请求\n    -- 列表中的第1000个元素，Haskell 会返回给你\n    \n    [1..] !! 999 -- 1000\n    \n    -- Haskell 计算了列表中 1 - 1000 个元素。。。但是\n    -- 这个无限元素的列表中剩下的元素还不存在！ Haskell 不会\n    -- 真正地计算它们知道它需要。\n    \n    \u003cFS\u003e- 连接两个列表\n    [1..5] ++ [6..10]\n    \n    -- 往列表头增加元素\n    0:[1..5] -- [0, 1, 2, 3, 4, 5]\n    \n    -- 列表中的下标\n    [0..] !! 5 -- 5\n    \n    -- 更多列表操作\n    head [1..5] -- 1\n    tail [1..5] -- [2, 3, 4, 5]\n    init [1..5] -- [1, 2, 3, 4]\n    last [1..5] -- 5\n    \n    -- 列表推导\n    [x*2 | x \u003c- [1..5]] -- [2, 4, 6, 8, 10]\n    \n    -- 附带条件\n    [x*2 | x \u003c-[1..5], x*2 \u003e 4] -- [6, 8, 10]\n    \n    -- 元组中的每一个元素可以是不同类型的，但是一个元组\n    -- 的长度是固定的\n    -- 一个元组\n    (\"haskell\", 1)\n    \n    -- 获取元组中的元素\n    fst (\"haskell\", 1) -- \"haskell\"\n    snd (\"haskell\", 1) -- 1\n    \n    ----------------------------------------------------\n    -- 3. 函数\n    ----------------------------------------------------\n    -- 一个接受两个变量的简单函数\n    add a b = a + b\n    \n    -- 注意，如果你使用 ghci (Hakell 解释器)\n    -- 你将需要使用 `let`，也就是\n    -- let add a b = a + b\n    \n    -- 使用函数\n    add 1 2 -- 3\n    \n    -- 你也可以把函数放置在两个参数之间\n    -- 附带倒引号：\n    1 `add` 2 -- 3\n    \n    -- 你也可以定义不带字符的函数！这使得\n    -- 你定义自己的操作符！这里有一个操作符\n    -- 来做整除\n    (//) a b = a `div` b\n    35 // 4 -- 8\n    \n    -- 守卫：一个简单的方法在函数里做分支\n    fib x\n      | x \u003c 2 = x\n      | otherwise = fib (x - 1) + fib (x - 2)\n    \n    -- 模式匹配是类型的。这里有三种不同的 fib \n    -- 定义。Haskell 将自动调用第一个\n    -- 匹配值的模式的函数。\n    fib 1 = 1\n    fib 2 = 2\n    fib x = fib (x - 1) + fib (x - 2)\n    \n    -- 元组的模式匹配：\n    foo (x, y) = (x + 1, y + 2)\n    \n    -- 列表的模式匹配。这里 `x` 是列表中第一个元素，\n    -- 并且 `xs` 是列表剩余的部分。我们可以写\n    -- 自己的 map 函数：\n    myMap func [] = []\n    myMap func (x:xs) = func x:(myMap func xs)\n    \n    -- 编写出来的匿名函数带有一个反斜杠，后面跟着\n    -- 所有的参数。\n    myMap (\\x -\u003e x + 2) [1..5] -- [3, 4, 5, 6, 7]\n    \n    -- 使用 fold （在一些语言称为`inject`）随着一个匿名的\n    -- 函数。foldl1 意味着左折叠(fold left), 并且使用列表中第一个值\n    -- 作为累加器的初始化值。\n    foldl1 (\\acc x -\u003e acc + x) [1..5] -- 15\n    \n    ----------------------------------------------------\n    -- 4. 更多的函数\n    ----------------------------------------------------\n    \n    -- 柯里化(currying)：如果你不传递函数中所有的参数，\n    -- 它就变成“柯里化的”。这意味着，它返回一个接受剩余参数的函数。\n    \n    add a b = a + b\n    foo = add 10 -- foo 现在是一个接受一个数并对其加 10 的函数\n    foo 5 -- 15\n    \n    -- 另外一种方式去做同样的事\n    foo = (+10)\n    foo 5 -- 15\n    \n    -- 函数组合\n    -- (.) 函数把其它函数链接到一起\n    -- 举个列子，这里 foo 是一个接受一个值的函数。它对接受的值加 10，\n    -- 并对结果乘以 5，之后返回最后的值。\n    foo = (*5) . (+10)\n    \n    -- (5 + 10) * 5 = 75\n    foo 5 -- 75\n    \n    -- 修复优先级\n    -- Haskell 有另外一个函数称为 `$`。它改变优先级\n    -- 使得其左侧的每一个操作先计算然后应用到\n    -- 右侧的每一个操作。你可以使用 `.` 和 `$` 来除去很多\n    -- 括号：\n    \n    -- before\n    (even (fib 7)) -- true\n    \n    -- after\n    even . fib $ 7 -- true\n    \n    ----------------------------------------------------\n    -- 5. 类型签名\n    ----------------------------------------------------\n    \n    -- Haskell 有一个非常强壮的类型系统，一切都有一个类型签名。\n    \n    -- 一些基本的类型：\n    5 :: Integer\n    \"hello\" :: String\n    True :: Bool\n    \n    -- 函数也有类型。\n    -- `not` 接受一个布尔型返回一个布尔型：\n    -- not :: Bool -\u003e Bool\n    \n    -- 这是接受两个参数的函数：\n    -- add :: Integer -\u003e Integer -\u003e Integer\n    \n    -- 当你定义一个值，在其上写明它的类型是一个好实践：\n    double :: Integer -\u003e Integer\n    double x = x * 2\n    \n    ----------------------------------------------------\n    -- 6. 控制流和 If 语句\n    ----------------------------------------------------\n    \n    -- if 语句\n    haskell = if 1 == 1 then \"awesome\" else \"awful\" -- haskell = \"awesome\"\n    \n    -- if 语句也可以有多行，缩进是很重要的\n    haskell = if 1 == 1\n                then \"awesome\"\n                else \"awful\"\n    \n    -- case 语句：这里是你可以怎样去解析命令行参数\n    case args of\n      \"help\" -\u003e printHelp\n      \"start\" -\u003e startProgram\n      _ -\u003e putStrLn \"bad args\"\n    \n    -- Haskell 没有循环因为它使用递归取代之。\n    -- map 应用一个函数到一个数组中的每一个元素\n    \n    map (*2) [1..5] -- [2, 4, 6, 8, 10]\n    \n    -- 你可以使用 map 来编写 for 函数\n    for array func = map func array\n    \n    -- 然后使用它\n    for [0..5] $ \\i -\u003e show i\n    \n    -- 我们也可以像这样写：\n    for [0..5] show\n    \n    -- 你可以使用 foldl 或者 foldr 来分解列表\n    -- foldl \u003cfn\u003e \u003cinitial value\u003e \u003clist\u003e\n    foldl (\\x y -\u003e 2*x + y) 4 [1,2,3] -- 43\n    \n    -- 这和下面是一样的\n    (2 * (2 * (2 * 4 + 1) + 2) + 3)\n    \n    -- foldl 是左手边的，foldr 是右手边的-\n    foldr (\\x y -\u003e 2*x + y) 4 [1,2,3] -- 16\n    \n    -- 这和下面是一样的\n    (2 * 3 + (2 * 2 + (2 * 1 + 4)))\n    \n    ----------------------------------------------------\n    -- 7. 数据类型\n    ----------------------------------------------------\n    \n    -- 这里展示在 Haskell 中你怎样编写自己的数据类型\n    \n    data Color = Red | Blue | Green\n    \n    -- 现在你可以在函数中使用它：\n    \n    \n    say :: Color -\u003e String\n    say Red = \"You are Red!\"\n    say Blue = \"You are Blue!\"\n    say Green =  \"You are Green!\"\n    \n    -- 你的数据类型也可以有参数：\n    \n    data Maybe a = Nothing | Just a\n    \n    -- 类型 Maybe 的所有\n    Just \"hello\"    -- of type `Maybe String`\n    Just 1          -- of type `Maybe Int`\n    Nothing         -- of type `Maybe a` for any `a`\n    \n    ----------------------------------------------------\n    -- 8. Haskell IO\n    ----------------------------------------------------\n    \n    -- 虽然在没有解释 monads 的情况下 IO不能被完全地解释，\n    -- 着手解释到位并不难。\n    \n    -- 当一个 Haskell 程序被执行，函数 `main` 就被调用。\n    -- 它必须返回一个类型 `IO ()` 的值。举个列子：\n    \n    main :: IO ()\n    main = putStrLn $ \"Hello, sky! \" ++ (say Blue) \n    -- putStrLn has type String -\u003e IO ()\n    \n    -- 如果你能实现你的程序依照函数从 String 到 String，那样编写 IO 是最简单的。\n    -- 函数\n    --    interact :: (String -\u003e String) -\u003e IO ()\n    -- 输入一些文本，在其上运行一个函数，并打印出输出\n    \n    countLines :: String -\u003e String\n    countLines = show . length . lines\n    \n    main' = interact countLines\n    \n    -- 你可以考虑一个 `IO()` 类型的值，当做一系列计算机所完成的动作的代表，\n    -- 就像一个以命令式语言编写的计算机程序。我们可以使用 `do` 符号来把动作链接到一起。\n    -- 举个列子：\n    \n    sayHello :: IO ()\n    sayHello = do \n       putStrLn \"What is your name?\"\n       name \u003c- getLine -- this gets a line and gives it the name \"input\"\n       putStrLn $ \"Hello, \" ++ name\n       \n    -- 练习：编写只读取一行输入的 `interact`\n       \n    -- 然而，`sayHello` 中的代码将不会被执行。唯一被执行的动作是 `main` 的值。\n    -- 为了运行 `sayHello`，注释上面 `main` 的定义，并代替它：\n    --   main = sayHello\n    \n    -- 让我们来更好地理解刚才所使用的函数 `getLine` 是怎样工作的。它的类型是：\n    --    getLine :: IO String\n    -- 你可以考虑一个 `IO a` 类型的值，代表一个当被执行的时候\n    -- 将产生一个 `a` 类型的值的计算机程序（除了它所做的任何事之外）。我们可以保存和重用这个值通过 `\u003c-`。\n    -- 我们也可以写自己的 `IO String` 类型的动作：\n    \n    action :: IO String\n    action = do\n       putStrLn \"This is a line. Duh\"\n       input1 \u003c- getLine \n       input2 \u003c- getLine\n       -- The type of the `do` statement is that of its last line.\n       -- `return` is not a keyword, but merely a function \n       return (input1 ++ \"\\n\" ++ input2) -- return :: String -\u003e IO String\n    \n    -- 我们可以使用这个动作就像我们使用 `getLine`:\n    \n    main'' = do\n        putStrLn \"I will echo two lines!\"\n        result \u003c- action \n        putStrLn result\n        putStrLn \"This was all, folks!\"\n    \n    -- `IO` 类型是一个 \"monad\" 的例子。Haskell 使用一个 monad 来做 IO的方式允许它是一门纯函数式语言。\n    -- 任何与外界交互的函数(也就是 IO) 都在它的类型签名处做一个 `IO` 标志\n    -- 着让我们推出 什么样的函数是“纯洁的”(不与外界交互，不修改状态) 和 什么样的函数不是 “纯洁的”\n    \n    -- 这是一个强有力的特征，因为并发地运行纯函数是简单的；因此，Haskell 中并发是非常简单的。\n    \n    \n    ----------------------------------------------------\n    -- 9. The Haskell REPL\n    ----------------------------------------------------\n    \n    -- 键入 `ghci` 开始 repl。\n    -- 现在你可以键入 Haskell 代码。\n    -- 任何新值都需要通过 `let` 来创建：\n    \n    let foo = 5\n    \n    -- 你可以查看任何值的类型，通过命令 `:t`：\n    \n    \u003e:t foo\n    foo :: Integer\n    \n    -- 你也可以运行任何 `IO ()`类型的动作\n    \n    \u003e sayHello\n    What is your name?\n    Friend!\n    Hello, Friend!\n    \n    \n    qsort [] = []\n    qsort (p:xs) = qsort lesser ++ [p] ++ qsort greater\n        where lesser  = filter (\u003c p) xs\n              greater = filter (\u003e= p) xs\n        ","Tags":["Haskell"," learnxinyminutes"],"CreateTime":1414472390,"EditTime":1414472390,"UpdateTime":1414472390,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":198}