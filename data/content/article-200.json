{"Id":200,"Title":"Docker基础技术：Linux CGroup","Slug":"2015-04-17-4","Text":"转自  [coolshell.cn](http://coolshell.cn/articles/17049.html) 原作者[ 陈皓](http://coolshell.cn) \n\n![](/static/upload/201504171126201.png)\n\n前面，我们介绍了[Linux Namespace](http://link-pub.cn/article/196/2015-04-17-2.html)，但是Namespace解决的问题主要是环境隔离的问题，这只是虚拟化中最最基础的一步，我们还需要解决对计算机资源使用上的隔离。也就是说，虽然你通过Namespace把我Jail到一个特定的环境中去了，但是我在其中的进程使用用CPU、内存、磁盘等这些计算资源其实还是可以随心所欲的。所以，我们希望对进程进行资源利用上的限制或控制。这就是Linux CGroup出来了的原因。\n\nLinux CGroup全称Linux Control Group， 是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。这个项目最早是由Google的工程师在2006年发起（主要是Paul Menage和Rohit Seth），最早的名称为进程容器（process containers）。在2007年时，因为在Linux内核中，容器（container）这个名词太过广泛，为避免混乱，被重命名为cgroup，并且被合并到2.6.24版的内核中去。然后，其它开始了他的发展。\n\nLinux CGroupCgroup 可​​​让​​​您​​​为​​​系​​​统​​​中​​​所​​​运​​​行​​​任​​​务​​​（进​​​程​​​）的​​​用​​​户​​​定​​​义​​​组​​​群​​​分​​​配​​​资​​​源​​​ — 比​​​如​​​ CPU 时​​​间​​​、​​​系​​​统​​​内​​​存​​​、​​​网​​​络​​​带​​​宽​​​或​​​者​​​这​​​些​​​资​​​源​​​的​​​组​​​合​​​。​​​您​​​可​​​以​​​监​​​控​​​您​​​配​​​置​​​的​​​ cgroup，拒​​​绝​​​ cgroup 访​​​问​​​某​​​些​​​资​​​源​​​，甚​​​至​​​在​​​运​​​行​​​的​​​系​​​统​​​中​​​动​​​态​​​配​​​置​​​您​​​的​​​ cgroup。\n\n主要提供了如下功能：\n\n + **Resource limitation**: 限制资源使用，比如内存使用上限以及文件系统的缓存限制。\n + **Prioritization**: 优先级控制，比如：CPU利用和磁盘IO吞吐。\n + **Accounting**: 一些审计或一些统计，主要目的是为了计费。\n + **Control**: 挂起进程，恢复执行进程。\n\n使​​​用​​​ cgroup，系​​​统​​​管​​​理​​​员​​​可​​​更​​​具​​​体​​​地​​​控​​​制​​​对​​​系​​​统​​​资​​​源​​​的​​​分​​​配​​​、​​​优​​​先​​​顺​​​序​​​、​​​拒​​​绝​​​、​​​管​​​理​​​和​​​监​​​控​​​。​​​可​​​更​​​好​​​地​​​根​​​据​​​任​​​务​​​和​​​用​​​户​​​分​​​配​​​硬​​​件​​​资​​​源​​​，提​​​高​​​总​​​体​​​效​​​率​​​。\n\n在实践中，系统管理员一般会利用CGroup做下面这些事（有点像为某个虚拟机分配资源似的）：\n\n + 隔离一个进程集合（比如：nginx的所有进程），并限制他们所消费的资源，比如绑定CPU的核。\n + 为这组进程 分配其足够使用的内存\n + 为这组进程分配相应的网络带宽和磁盘存储限制\n + 限制访问某些设备（通过设置设备的白名单）\n\n那么CGroup是怎么干的呢？我们先来点感性认识吧。\n\n首先，Linux把CGroup这个事实现成了一个file system，你可以mount。在我的Ubuntu 14.04下，你输入以下命令你就可以看到cgroup已为你mount好了。\n\n    hchen@ubuntu:~$ mount -t cgroup\n    cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,relatime,cpuset)\n    cgroup on /sys/fs/cgroup/cpu type cgroup (rw,relatime,cpu)\n    cgroup on /sys/fs/cgroup/cpuacct type cgroup (rw,relatime,cpuacct)\n    cgroup on /sys/fs/cgroup/memory type cgroup (rw,relatime,memory)\n    cgroup on /sys/fs/cgroup/devices type cgroup (rw,relatime,devices)\n    cgroup on /sys/fs/cgroup/freezer type cgroup (rw,relatime,freezer)\n    cgroup on /sys/fs/cgroup/blkio type cgroup (rw,relatime,blkio)\n    cgroup on /sys/fs/cgroup/net_prio type cgroup (rw,net_prio)\n    cgroup on /sys/fs/cgroup/net_cls type cgroup (rw,net_cls)\n    cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,relatime,perf_event)\n    cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,relatime,hugetlb)\n\n或者使用lssubsys命令：\n\n    $ lssubsys  -m\n    cpuset /sys/fs/cgroup/cpuset\n    cpu /sys/fs/cgroup/cpu\n    cpuacct /sys/fs/cgroup/cpuacct\n    memory /sys/fs/cgroup/memory\n    devices /sys/fs/cgroup/devices\n    freezer /sys/fs/cgroup/freezer\n    blkio /sys/fs/cgroup/blkio\n    net_cls /sys/fs/cgroup/net_cls\n    net_prio /sys/fs/cgroup/net_prio\n    perf_event /sys/fs/cgroup/perf_event\n    hugetlb /sys/fs/cgroup/hugetlb\n\n我们可以看到，在/sys/fs下有一个cgroup的上上录，这个目录下还有很多子目录，比如： cpu，cpuset，memory，blkio……这些，这些都是cgroup的子系统。分别用于干不同的事的。\n\n如果你没有看到上述的目录，你可以自己mount，下面给了一个示例：\n\n    mkdir cgroup\n    mount -t tmpfs cgroup_root ./cgroup\n    mkdir cgroup/cpuset\n    mount -t cgroup -ocpuset cpuset ./cgroup/cpuset/\n    mkdir cgroup/cpu\n    mount -t cgroup -ocpu cpu ./cgroup/cpu/\n    mkdir cgroup/memory\n    mount -t cgroup -omemory memory ./cgroup/memory/\n\n一旦mount成功，你就会看到这些目录下就有好文件了，比如，如下所示的cpu和cpuset的子系统：\n\n    hchen@ubuntu:~$ ls /sys/fs/cgroup/cpu /sys/fs/cgroup/cpuset/\n    /sys/fs/cgroup/cpu:\n    cgroup.clone_children  cgroup.sane_behavior  cpu.shares         release_agent\n    cgroup.event_control   cpu.cfs_period_us     cpu.stat           tasks\n    cgroup.procs           cpu.cfs_quota_us      notify_on_release  user\n     \n    /sys/fs/cgroup/cpuset/:\n    cgroup.clone_children  cpuset.mem_hardwall             cpuset.sched_load_balance\n    cgroup.event_control   cpuset.memory_migrate           cpuset.sched_relax_domain_level\n    cgroup.procs           cpuset.memory_pressure          notify_on_release\n    cgroup.sane_behavior   cpuset.memory_pressure_enabled  release_agent\n    cpuset.cpu_exclusive   cpuset.memory_spread_page       tasks\n    cpuset.cpus            cpuset.memory_spread_slab       user\n    cpuset.mem_exclusive   cpuset.mems\n\n你可以到/sys/fs/cgroup的各个子目录下去make个dir，你会发现，一旦你创建了一个子目录，这个子目录里又有很多文件了。\n\n    hchen@ubuntu:/sys/fs/cgroup/cpu$ sudo mkdir haoel\n    [sudo] password for hchen: \n    hchen@ubuntu:/sys/fs/cgroup/cpu$ ls ./haoel\n    cgroup.clone_children  cgroup.procs       cpu.cfs_quota_us  cpu.stat           tasks\n    cgroup.event_control   cpu.cfs_period_us  cpu.shares        notify_on_release\n\n好了，我们来看几个示例。\n\n## CPU 限制\n\n假设，我们有一个非常吃CPU的程序，叫deadloop，其源码如下：\ndeadloop.c\n\n    int main(void)\n    {\n        int i = 0;\n        for(;;) i++;\n        return 0;\n    }\n\n用sudo执行起来后，毫无疑问，CPU被干到了100%（下面是top命令的输出）\n\n    PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND     \n    3529 root      20   0    4196    736    656 R 99.6  0.1   0:23.13 deadloop\n\n\n然后，我们这前不是在/sys/fs/cgroup/cpu下创建了一个haoel的group。我们先设置一下这个group的cpu利用的限制：\n\n    hchen@ubuntu:~# cat /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us \n    -1\n    root@ubuntu:~# echo 20000 \u003e /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us\n\n\n\n我们看到，这个进程的PID是3529，我们把这个进程加到这个cgroup中：\n\n\n    # echo 3529 \u003e\u003e /sys/fs/cgroup/cpu/haoel/tasks\n\n\n然后，就会在top中看到CPU的利用立马下降成20%了。（前面我们设置的20000就是20%的意思）\n\n\n    PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND     \n    3529 root      20   0    4196    736    656 R 19.9  0.1   8:06.11 deadloop\n\n\n下面的代码是一个线程的示例：\n\n    #define _GNU_SOURCE         /* See feature_test_macros(7) */\n     \n    #include \u003cpthread.h\u003e\n    #include \u003cstdio.h\u003e\n    #include \u003cstdlib.h\u003e\n    #include \u003csys/stat.h\u003e\n    #include \u003csys/types.h\u003e\n    #include \u003cunistd.h\u003e\n    #include \u003csys/syscall.h\u003e\n     \n     \n    const int NUM_THREADS = 5;\n     \n    void *thread_main(void *threadid)\n    {\n        /* 把自己加入cgroup中（syscall(SYS_gettid)为得到线程的系统tid） */\n        char cmd[128];\n        sprintf(cmd, \"echo %ld \u003e\u003e /sys/fs/cgroup/cpu/foo/tasks\", syscall(SYS_gettid));\n        system(cmd); \n        sprintf(cmd, \"echo %ld \u003e\u003e /sys/fs/cgroup/cpuset/foo/tasks\", syscall(SYS_gettid));\n        system(cmd);\n     \n        long tid;\n        tid = (long)threadid;\n        printf(\"Hello World! It's me, thread #%ld, pid #%ld!\\n\", tid, syscall(SYS_gettid));\n         \n        int a=0; \n        while(1) {\n            a++;\n        }\n        pthread_exit(NULL);\n    }\n    int main (int argc, char *argv[])\n    {\n        int num_threads;\n        if (argc \u003e 1){\n            num_threads = atoi(argv[1]);\n        }\n        if (num_threads\u003c=0 || num_threads\u003e=100){\n            num_threads = NUM_THREADS;\n        }\n     \n        /* 设置CPU利用率为50% */\n        mkdir(\"/sys/fs/cgroup/cpu/haoel\", 755);\n        system(\"echo 50000 \u003e /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us\");\n     \n        mkdir(\"/sys/fs/cgroup/cpuset/haoel\", 755);\n        /* 限制CPU只能使用#2核和#3核 */\n        system(\"echo \\\"2,3\\\" \u003e /sys/fs/cgroup/cpuset/haoel/cpuset.cpus\");\n     \n        pthread_t* threads = (pthread_t*) malloc (sizeof(pthread_t)*num_threads);\n        int rc;\n        long t;\n        for(t=0; t\u003cnum_threads; t++){\n            printf(\"In main: creating thread %ld\\n\", t);\n            rc = pthread_create(\u0026threads[t], NULL, thread_main, (void *)t);\n            if (rc){\n                printf(\"ERROR; return code from pthread_create() is %d\\n\", rc);\n                exit(-1);\n            }\n        }\n     \n        /* Last thing that main() should do */\n        pthread_exit(NULL);\n        free(threads);\n    }\n\n## 内存使用限制\n\n我们再来看一个限制内存的例子（下面的代码是个死循环，其它不断的分配内存，每次512个字节，每次休息一秒）：\n\n    #include \u003cstdio.h\u003e\n    #include \u003cstdlib.h\u003e\n    #include \u003cstring.h\u003e\n    #include \u003csys/types.h\u003e\n    #include \u003cunistd.h\u003e\n     \n    int main(void)\n    {\n        int size = 0;\n        int chunk_size = 512;\n        void *p = NULL;\n     \n        while(1) {\n     \n            if ((p = malloc(p, chunk_size)) == NULL) {\n                printf(\"out of memory!!\\n\");\n                break;\n            }\n            memset(p, 1, chunk_size);\n            size += chunk_size;\n            printf(\"[%d] - memory is allocated [%8d] bytes \\n\", getpid(), size);\n            sleep(1);\n        }\n        return 0;\n    }\n\n然后，在我们另外一边：\n\n    # 创建memory cgroup\n    $ mkdir /sys/fs/cgroup/memory/haoel\n    $ echo 64k \u003e /sys/fs/cgroup/memory/haoel/memory.limit_in_bytes\n     \n    # 把上面的进程的pid加入这个cgroup\n    $ echo [pid] \u003e /sys/fs/cgroup/memory/haoel/tasks\n\n你会看到，一会上面的进程就会因为内存问题被kill掉了。\n\n## 磁盘I/O限制\n\n我们先看一下我们的硬盘IO，我们的模拟命令如下：（从/dev/sda1上读入数据，输出到/dev/null上）\n\n   sudo dd if=/dev/sda1 of=/dev/null\n\n我们通过iotop命令我们可以看到相关的IO速度是55MB/s（虚拟机内）：\n\n    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO\u003e    COMMAND          \n    8128 be/4 root       55.74 M/s    0.00 B/s  0.00 % 85.65 % dd if=/de~=/dev/null...\n\n然后，我们先创建一个blkio（块设备IO）的cgroup\n\n    mkdir /sys/fs/cgroup/blkio/haoel\n\n\n并把读IO限制到1MB/s，并把前面那个dd命令的pid放进去（注：8:0 是设备号，你可以通过ls -l /dev/sda1获得）：\n\n    root@ubuntu:~# echo '8:0 1048576'  \u003e /sys/fs/cgroup/blkio/haoel/blkio.throttle.read_bps_device \n    root@ubuntu:~# echo 8128 \u003e /sys/fs/cgroup/blkio/haoel/tasks\n\n再用iotop命令，你马上就能看到读速度被限制到了1MB/s左右。\n\n    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO\u003e    COMMAND          \n    8128 be/4 root      973.20 K/s    0.00 B/s  0.00 % 94.41 % dd if=/de~=/dev/null...\n\n## CGroup的子系统\n\n好了，有了以上的感性认识我们来，我们来看看control group有哪些子系统：\n\n  + blkio — 这​​​个​​​子​​​系​​​统​​​为​​​块​​​设​​​备​​​设​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​，比​​​如​​​物​​​理​​​设​​​备​​​（磁​​​盘​​​，固​​​态​​​硬​​​盘​​​，USB 等​​​等​​​）。\n + cpu — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​ CPU 的​​​ cgroup 任​​​务​​​访​​​问​​​。​​​\n + cpuacct — 这​​​个​​​子​​​系​​​统​​​自​​​动​​​生​​​成​​​ cgroup 中​​​任​​​务​​​所​​​使​​​用​​​的​​​ CPU 报​​​告​​​。​​​\n + cpuset — 这​​​个​​​子​​​系​​​统​​​为​​​ cgroup 中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​ CPU（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点​​​。​​​\n + devices — 这​​​个​​​子​​​系​​​统​​​可​​​允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备​​​。​​​\n + freezer — 这​​​个​​​子​​​系​​​统​​​挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务​​​。​​​\n + memory — 这​​​个​​​子​​​系​​​统​​​设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​​​源使用​​​报​​​告​​​。​​​\n + net_cls — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​等​​​级​​​识​​​别​​​符​​​（classid）标​​​记​​​网​​​络​​​数​​​据​​​包​​​，可​​​允​​​许​​​ Linux 流​​​量​​​控​​​制​​​程​​​序​​​（tc）识​​​别​​​从​​​具​​​体​​​ cgroup 中​​​生​​​成​​​的​​​数​​​据​​​包​​​。​​​\n + net_prio — 这个子系统用来设计网络流量的优先级\n + hugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。\n\n\n    ​​​\n\n注意，你可能在Ubuntu 14.04下看不到net_cls和net_prio这两个cgroup，你需要手动mount一下：\n\n    $ sudo modprobe cls_cgroup\n    $ sudo mkdir /sys/fs/cgroup/net_cls\n    $ sudo mount -t cgroup -o net_cls none /sys/fs/cgroup/net_cls\n     \n    $ sudo modprobe netprio_cgroup\n    $ sudo mkdir /sys/fs/cgroup/net_prio\n    $ sudo mount -t cgroup -o net_prio none /sys/fs/cgroup/net_prio\n\n关于各个子系统的参数细节，以及更多的Linux CGroup的文档，你可以看看下面的文档：\n\n  + [Linux Kernel的官方文档](https://www.kernel.org/doc/Documentation/cgroups/)\n  + [Redhat的官方文档](https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html-single/Resource_Management_Guide/index.html#ch-Subsystems_and_Tunable_Parameters)\n\n\n## CGroup的术语\n\nCGroup有下述术语：\n\n  + **任务**（Tasks）：就是系统的一个进程。\n  + **控制组**（Control Group）：一组按照某种标准划分的进程，比如官方文档中的Professor和Student，或是WWW和System之类的，其表示了某进程组。Cgroups中的资源控制都是以控制组为单位实现。一个进程可以加入到某个控制组。而资源的限制是定义在这个组上，就像上面示例中我用的haoel一样。简单点说，cgroup的呈现就是一个目录带一系列的可配置文件。\n  + **层级**（Hierarchy）：控制组可以组织成hierarchical的形式，既一颗控制组的树（目录结构）。控制组树上的子节点继承父结点的属性。简单点说，hierarchy就是在一个或多个子系统上的cgroups目录树。\n  + **子系统**（Subsystem）：一个子系统就是一个资源控制器，比如CPU子系统就是控制CPU时间分配的一个控制器。子系统必须附加到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群都受到这个子系统的控制。Cgroup的子系统可以有很多，也在不断增加中。\n\n## 下一代的CGroup\n\n上面，我们可以看到，CGroup的一些常用方法和相关的术语。一般来说，这样的设计在一般情况下还是没什么问题的，除了操作上的用户体验不是很好，但基本满足我们的一般需求了。\n\n不过，对此，有个叫Tejun Heo的同学非常不爽，他在Linux社区里对cgroup吐了一把槽，还引发了内核组的各种讨论。\n\n对于Tejun Heo同学来说，cgroup设计的相当糟糕。他给出了些例子，大意就是说，如果有多种层级关系，也就是说有多种对进程的分类方式，比如，我们可以按用户来分，分成Professor和Student，同时，也有按应用类似来分的，比如WWW和NFS等。那么，当一个进程即是Professor的，也是WWW的，那么就会出现多层级正交的情况，从而出现对进程上管理的混乱。另外，一个case是，如果有一个层级A绑定cpu，而层级B绑定memory，还有一个层级C绑定cputset，而有一些进程有的需要AB，有的需要AC，有的需要ABC，管理起来就相当不易。\n\n层级操作起来比较麻烦，而且如果层级变多，更不易于操作和管理，虽然那种方式很好实现，但是在使用上有很多的复杂度。你可以想像一个图书馆的图书分类问题，你可以有各种不同的分类，分类和图书就是一种多对多的关系。\n\n所以，在Kernel 3.16后，引入了[unified hierarchy](http://lwn.net/Articles/601840/)的新的设计，这个东西引入了一个叫`__DEVEL__sane_behavior`的特性（这个名字很明显意味目前还在开发试验阶段），它可以把所有子系统都挂载到根层级下，只有叶子节点可以存在tasks，非叶子节点只进行资源控制。\n\n我们mount一下看看：\n\n    $ sudo mount -t cgroup -o __DEVEL__sane_behavior cgroup ./cgroup\n     \n    $ ls ./cgroup\n    cgroup.controllers  cgroup.procs  cgroup.sane_behavior  cgroup.subtree_control \n     \n    $ cat ./cgroup/cgroup.controllers\n    cpuset cpu cpuacct memory devices freezer net_cls blkio perf_event net_prio hugetlb\n\n我们可以看到有四个文件，然后，你在这里mkdir一个子目录，里面也会有这四个文件。**上级的cgroup.subtree_control控制下级的cgroup.controllers。**\n\n举个例子：假设我们有以下的目录结构，b代表blkio，m代码memory，其中，A是root，包括所有的子系统（）。\n\n    # A(b,m) - B(b,m) - C (b)\n    #               \\ - D (b) - E\n     \n    # 下面的命令中， +表示enable， -表示disable\n     \n    # 在B上的enable blkio\n    # echo +blkio \u003e A/cgroup.subtree_control\n     \n    # 在C和D上enable blkio \n    # echo +blkio \u003e A/B/cgroup.subtree_control\n     \n    # 在B上enable memory  \n    # echo +memory \u003e A/cgroup.subtree_control\n\n在上述的结构中，\n\n  + cgroup只有上线控制下级，无法传递到下下级。所以，C和D中没有memory的限制，E中没有blkio和memory的限制。而本层的cgroup.controllers文件是个只读的，其中的内容就看上级的subtree_control里有什么了。\n  + **任何被配置过subtree_control的目录都不能绑定进程，根结点除外**。所以，A,C,D,E可以绑上进程，但是B不行。\n\n我们可以看到，**这种方式干净的区分开了两个事，一个是进程的分组，一个是对分组的资源控制**（以前这两个事完全混在一起），在目录继承上增加了些限制，这样可以避免一些模棱两可的情况。\n\n当然，这个事还在演化中，cgroup的这些问题这个事目前由cgroup的吐槽人Tejun Heo和华为的Li Zefan同学负责解决中。总之，这是一个系统管理上的问题，而且改变会影响很多东西，但一旦方案确定，老的cgroup方式将一去不复返。\n\n## 参考\n\n  + [Linux Kernel Cgroup Documents](https://www.kernel.org/doc/Documentation/cgroups/)\n  + [Reahat Resource Management Guide](https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html-single/Resource_Management_Guide/index.html)\n  + [Fixing control groups](https://lwn.net/Articles/484251/)\n  + [The unified control group hierarchy in 3.16](http://lwn.net/Articles/601840/)\n  + [Cgroup v2(PDF)](http://events.linuxfoundation.org/sites/events/files/slides/2014-KLF.pdf)\n","Tags":["docker"],"CreateTime":1429241192,"EditTime":1429241192,"UpdateTime":1429241192,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":255}