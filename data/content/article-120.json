{"Id":120,"Title":"C语言基础（3-3)-原码补码反码及其原理","Slug":"2014-11-13-11","Text":"### 一. 机器数和真值\n------\n在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.\n\n##### 1、机器数\n\n一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.\n\n比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。\n\n那么，这里的 00000011 和 10000011 就是机器数。\n\n##### 2、真值\n\n因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。\n\n例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1\n\n### 二. 原码, 反码, 补码的基础概念和计算方法.\n在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.\n\n##### 1. 原码\n\n原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:\n\n    [+1]原 = 0000 0001\n    \n    [-1]原 = 1000 0001\n\n第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:\n\n    [1111 1111 , 0111 1111]\n\n即\n\n    [-127 , 127]\n\n原码是人脑最容易理解和计算的表示方式.\n\n##### 2. 反码\n\n反码的表示方法是:\n\n正数的反码是其本身\n\n负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.\n\n    [+1] = [00000001]原 = [00000001]反\n    \n    [-1] = [10000001]原 = [11111110]反\n\n可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.\n\n##### 3. 补码\n\n补码的表示方法是:\n\n正数的补码就是其本身\n\n负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)\n\n    [+1] = [00000001]原 = [00000001]反 = [00000001]补\n    \n    [-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.\n\n\n### 三. 为何要使用原码, 反码和补码\n在开始深入学习前, 我的学习建议是先\"死记硬背\"上面的原码, 反码和补码的表示方式以及计算方法.\n\n现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:\n\n    [+1] = [00000001]原 = [00000001]反 = [00000001]补\n\n所以不需要过多解释. 但是对于负数:\n\n    [-1] = [10000001]原 = [11111110]反 = [11111111]补\n\n可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?\n\n首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别\"符号位\"显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: `1-1 = 1 + (-1) = 0` , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.\n\n于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:\n\n计算十进制的表达式: `1-1=0`\n\n    1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2\n\n如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.\n\n为了解决原码做减法的问题, 出现了反码:\n\n计算十进制的表达式: `1-1=0`\n\n    1 - 1 = 1 + (-1) = \n      [0000 0001]原 + [1000 0001]原 =\n      [0000 0001]反 + [1111 1110]反 = \n      [1111 1111]反 = [1000 0000]原 = -0\n\n发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在\"0\"这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.\n\n于是补码的出现, 解决了0的符号以及两个编码的问题:\n\n    1-1 = 1 + (-1) = \n    [0000 0001]原 + [1000 0001]原 = \n    [0000 0001]补 + [1111 1111]补 = \n    [0000 0000]补=[0000 0000]原\n\n这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:\n\n    (-1) + (-127) = \n    [1000 0001]原 + [1111 1111]原 = \n    [1111 1111]补 + [1000 0001]补 = \n    [1000 0000]补\n\n-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)\n\n使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].\n\n因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.\n\n### 四 原码, 反码, 补码 再深入\n计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?\n\n将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:\n\n  + 1. 往回拨2个小时: 6 - 2 = 4\n  \n  + 2. 往前拨10个小时: (6 + 10) mod 12 = 4\n  \n  + 3. 往前拨10+12=22个小时: (6+22) mod 12 =4\n\n2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.\n\n所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!\n\n现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.\n\n首先介绍一个数学中相关的概念: 同余\n\n同余的概念\n\n两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余\n\n记作 a ≡ b (mod m)\n\n读作 a 与 b 关于模 m 同余。\n\n举例说明:\n\n    4 mod 12 = 4\n    \n    16 mod 12 = 4\n    \n    28 mod 12 = 4\n\n所以4, 16, 28关于模 12 同余.\n\n\n负数取模\n\n正数进行mod运算是很简单的. 但是负数呢?\n\n下面是关于mod运算的数学定义:\n![mod](/static/upload/201411131458356.jpg )\n\n    x mod y = x - y L x / y J\n\n上面公式的意思是:\n\nx mod y等于 x 减去 y 乘上 x与y的商的下界.\n\n以 -3 mod 2 举例:\n\n    -3 mod 2\n    \n    = -3 - 2xL -3/2 J\n    \n    = -3 - 2xL-1.5J\n    \n    = -3 - 2x(-2)\n    \n    = -3 + 4 = 1\n\n所以:\n\n    (-2) mod 12 = 12-2=10\n    \n    (-4) mod 12 = 12-4 = 8\n    \n    (-5) mod 12 = 12 - 5 = 7\n\n \n\n开始证明\n\n再回到时钟的问题上:\n\n回拨2小时 = 前拨10小时\n\n回拨4小时 = 前拨8小时\n\n回拨5小时= 前拨7小时\n\n注意, 这里发现的规律!\n\n结合上面学到的同余的概念.实际上:\n\n    (-2) mod 12 = 10\n    \n    10 mod 12 = 10\n\n-2与10是同余的.\n\n    (-4) mod 12 = 8\n    \n    8 mod 12 = 8\n\n-4与8是同余的.\n\n距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:\n\n反身性:\n\n    a ≡ a (mod m)\n\n这个定理是很显而易见的.\n\n线性运算定理:\n\n如果a ≡ b (mod m)，c ≡ d (mod m) 那么:\n    \n    (1)a ± c ≡ b ± d (mod m)\n    \n    (2)a * c ≡ b * d (mod m)\n\n\n所以:\n\n    7 ≡ 7 (mod 12)\n    \n    (-2) ≡ 10 (mod 12)\n    \n    7 -2 ≡ 7 + 10 (mod 12)\n\n现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.\n\n接下来回到二进制的问题上, 看一下: 2-1=1的问题.\n\n    2-1=2+(-1) = \n    [0000 0010]原 + [1000 0001]原= \n    [0000 0010]反 + [1111 1110]反\n\n先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.\n\n发现有如下规律:\n\n    (-1) mod 127 = 126\n    \n    126 mod 127 = 126\n\n即:\n\n    (-1) ≡ 126 (mod 127)\n    \n    2-1 ≡ 2+126 (mod 127)\n\n2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1\n\n所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!\n\n而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.\n\n既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?\n\n2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补\n\n如果把[1111 1111]当成原码, 去除符号位, 则:\n\n    [0111 1111]原 = 127\n\n其实, 在反码的基础上+1, 只是相当于增加了膜的值:\n\n    (-1) mod 128 = 127\n    \n    127 mod 128 = 127\n    \n    2-1 ≡ 2+127 (mod 128)\n\n此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].\n\n但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]","Tags":["C"],"CreateTime":1415862212,"EditTime":1415862212,"UpdateTime":1415862212,"IsComment":true,"IsLinked":false,"AuthorId":10,"Template":"blog.html","Type":"article","Status":"publish","Format":"markdown","Comments":[],"Hits":103}